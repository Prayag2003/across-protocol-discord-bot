{
    "https://docs.across.to/": {
        "title": "Getting Started | Across Docs",
        "headers": [
            "Getting Started",
            "Looking for something else? Get in touch"
        ],
        "paragraphs": [
            "Across is an interoperability protocol powered by intents. It is the first cross-chain intents protocol in production today, enabling the fastest and lowest-cost way to transfer value without security tradeoffs.",
            "Across can be easily integrated via our easy to use REST API into any application requiring instant, low cost cross-chain value transfer. Let users easily onboard assets without leaving your app. ",
            "Across can also be integrated in your application to abstract bridging completely, enabling users to directly interact with your app from any chain. ",
            "Across Settlement is the only production-ready, modular settlement layer built to facilitate cross-chain intents. Powers use cases that require customization beyond the Across Core offering, like cross-chain token swaps, new request for quote auction designs and more. ",
            "Join the growing network of independent relayers (a.k.a solvers, fillers, market makers) fulfilling intent order flow on Across. Earn up to 100% APY. ",
            "",
            "Last updated 2 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/introduction/what-is-across": {
        "title": "What is Across? | Across Docs",
        "headers": [
            "What is Across?",
            "Introduction",
            "Interoperability by Passing Messages",
            "Interoperability with Intents",
            "Closing the Loop: Settlement",
            "The Future of Interoperability is Intents",
            "Across' Intents Architecture"
        ],
        "paragraphs": [
            "Across is an interoperability protocol powered by intents. It is the only cross-chain intents protocol in production today, enabling the fastest and lowest-cost way to transfer value without security tradeoffs. Before diving into the technical details, its critical to understand why and where existing interoperability solutions fall short and why Across' intents-based architecture is needed. ",
            "The arrival of rollups and L2s scaled Ethereum but damaged end user UX in every way except price. Developers building on L2s must choose which silo they want to build on. Users must become experts in the interoperability tooling landscape simply to use dapps. This fragmentation will continue as more rollups and app-chains come online.",
            "Across' thesis is that an intents-based design paradigm is the solution to the interoperability challenges developers and users face today.",
            "Any interoperability discussion starts with the most fundamental challenge of token bridging: how can assets be sent from Chain A to Chain B? The naive answer is to ‚Äúsend a message‚Äù between the chains. Years of R&D have been invested in this approach, but it faces a problem: it is nearly impossible to send messages cheaply, quickly and securely. Every message-passing protocol today has unique trust assumptions, can only ever be as fast as the finality of chains it connects and has deep implementation complexity. ",
            "What if there was another way?",
            "Intents introduce a third party, a relayer (alternatively named filler, or solver), that does the job of delivering assets / executing user transactions quickly.",
            "An intent is a type of order where a user specifies an outcome instead of an execution path. In practice, intents manifest as a combination of a cross-chain limit order and an action to execute, all encoded within a standardized order structure. Relayers compete on cost and speed to fill these orders, which can include onchain actions as well as assets. Relayers deliver very quickly, without any messages.",
            "From the user‚Äôs perspective, interoperability is solved. Their desired outcome is achieved. ",
            "Intents architecture enables filling user orders extremely quickly, but how do relayers get paid for performing this service? User funds are escrowed in the settlement protocol, and are only released to the relayer once the protocol has verified that the user intent was ‚Äúfulfilled.‚Äù",
            "By using an intents-based architecture, the urgent part (filling user orders) is decoupled from the complex part (message verification). The trade-off is relayers must loan funds for the duration between filling user orders and verification, but the benefits of slow settlement far outweigh this cost.",
            "Message-passing is nearly impossible to do cheaply, quickly, and securely.",
            "Intents-based solutions with relayers can fill users instantly.",
            "Slower verification allows for cheap and secure settlement.",
            "Across' intent-based architecture can be distilled into a 3-layered system:",
            "Request for Quote Mechanism: Users express their desired outcomes without specifying the technical steps to achieve them.",
            "Network of Competitive Relayers: A decentralized network of 3rd parties compete to fulfill these orders.",
            "Settlement Layer: Escrows user input funds, performs verification, and repays relayers upon successful completion of the intent.",
            "Across intents-based architecture underpins our suite of products for end-users and developers:",
            "Across Bridge dApp: An end-user bridge dApp offering the lowest fees and fastest speeds of any cross-chain asset bridge.",
            "Across Bridge for Developers: Easily integrate Across' instant and low-cost liquidity via our easy to use REST API into any application. Let users easily onboard assets without leaving your app. And even abstract bridging completely, enabling users to directly interact with your app from any chain. ",
            "Across Settlement: The only production-ready, modular settlement layer built to facilitate cross-chain intents. Powers use cases that require customization beyond the Across Bridge Integration offering, like cross-chain token swaps, new request for quote auction designs and more. ",
            "Welcome to the developer documentation for Across ‚Äî where we're building the future of interoperability through intents. ",
            "Last updated 2 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Message-passing is nearly impossible to do cheaply, quickly, and securely.\nIntents-based solutions with relayers can fill users instantly.\nSlower verification allows for cheap and secure settlement.",
            "Across Bridge dApp: \nAn end-user bridge dApp offering the lowest fees and fastest speeds of any cross-chain asset bridge.\nAcross Bridge for Developers: \nEasily integrate Across' instant and low-cost liquidity via our easy to use \nREST API\n into any application. Let users easily onboard assets without leaving your app. And even abstract bridging completely, enabling users to directly interact with your app from any chain. \nAcross Settlement: \nThe only production-ready, modular settlement layer built to facilitate cross-chain intents. Powers use cases that require customization beyond the \nAcross Bridge Integration\n offering, like cross-chain token swaps, new request for quote auction designs and more.",
            "Introduction\nInteroperability by Passing Messages\nInteroperability with Intents\nClosing the Loop: Settlement\nThe Future of Interoperability is Intents\nAcross' Intents Architecture"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/introduction/technical-faq": {
        "title": "Technical FAQ | Across Docs",
        "headers": [
            "Technical FAQ"
        ],
        "paragraphs": [
            "Not yet, working on it!",
            "We recommend using the API for the easiest way to query suggested deposit params.",
            "Depending on the context, Across will sometimes send a user ETH and sometimes send a user WETH.",
            "If the input asset is ETH, and the recipient is an EOA, the EOA will receive ETH",
            "If the input asset is ETH, and the recipient is a contract, the contract will receive WETH (not ETH)",
            "If the input asset is WETH, and the recipient is an EOA, the EOA will receive ETH (not WETH)",
            "If the input asset is WETH, and the recipient is a contract, the contract will receive WETH",
            "",
            "To deposit ETH, or the native token for a network, set msg.value = inputAmount. To deposit WETH, set msg.value = 0. When depositing ETH or WETH, the inputAmount should be the same and the inputToken should be the WETH address for the current chain. ",
            "Last updated 5 days ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "If the input asset is ETH, and the recipient is an EOA, \nthe EOA will receive ETH\nIf the input asset is ETH, and the recipient is a contract, \nthe contract will receive WETH (not ETH)\nIf the input asset is WETH, and the recipient is an EOA, \nthe EOA will receive ETH (not WETH)\nIf the input asset is WETH, and the recipient is a contract, \nthe contract will receive WETH"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": [
            "Can I use the SDK to submit contract transactions?",
            "Should I use the API versus SDK to construct deposit parameters?",
            "What is the behavior of ETH / WETH in transfers?",
            "How do I deposit using ETH instead of WETH?"
        ]
    },
    "https://docs.across.to/introduction/migration-guides": {
        "title": "Migration Guides | Across Docs",
        "headers": [
            "Migration Guides"
        ],
        "paragraphs": [],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/introduction/migration-guides/migration-from-v2-to-v3": {
        "title": "Migration from V2 to V3 | Across Docs",
        "headers": [
            "Migration from V2 to V3",
            "Introduction",
            "Summary of Breaking Changes",
            "Across API migration guide",
            "Overview",
            "Non-breaking changes",
            "Host",
            "Breaking changes (mid- to long-term)",
            "Changes to Across Smart Contracts",
            "Breaking Change: Across+ (Composable Bridging) ",
            "Events",
            "Important changes for Relayers",
            "Important changes for dApp Developers"
        ],
        "paragraphs": [
            "Find below important migration information for users of the Across API and the smart contracts (e.g. those who call the Across SpokePools directly to deposit or fill bridge transfers and those who track SpokePool events).",
            "Across V2 is migrating in-place to V3 and will support cross-chain token swaps and a more streamlined contract interface. This guide is intended to help developers who integrate with Across to prepare their codebases for the upgrade. Please note that this page is a work in progress, and more sections will be added to help with different types of integrations.",
            "Recipient contracts implementing handleAcrossMessage must now replace that with a handleAcrossV3Message call. Details.",
            "Across V2 events including FundsDeposited will no longer be emitted. These will be replaced with V3 events. Details.",
            "Relayers must now fill all deposits with a new function, fillV3Relay(). Details.",
            "Depositors who wish to speed up their deposits must now use speedUpV3Deposit() instead of requestSpeedUpDeposit(). Details.",
            "Across v3 redesigns how fees are handled when creating deposits. In a nutshell, the calculation of fees will be simplified and replaced byinputAmount/outputAmount arguments. This will impact the response data of the API and also how to call the deposit function of a SpokePool contract. Note that these changes won't be breaking short-term but are actionable mid- to long-term.",
            "For a seamless upgrade, there will be no breaking changes for the existing v2 interfaces.",
            "Both will be available, but eventually across.to/api will be sunset, please upgrade to app.across.to/api accordingly. ",
            "Updated from across.to/api to app.across.to/api",
            "In Across v2, the request GET /suggested-fees returned",
            "It was then expected to call the method deposit of a SpokePool like",
            "The lpFeePct was not required as an argument and automatically derived based on the quoteTimestamp. But if you wanted to show the total bridge fee to the user, then you would have to sum them up like",
            "In Across v3, we need to pass the lpFeePct as part of the total fee when calling the deposit function. In order to be backwards-compatible, the API now returns for GET /suggested-fees",
            "There are no changes to the interface and therefore no changes are required for how you call the deposit function or calculate the total bridge fee. If you want to show the correct fee breakdown though, some changes are needed (see here).",
            "If you want to show the correct detailed fee breakdown, you can use the newly added v3 properties of the GET /suggested-fees response data",
            "Using the values of the new fees struct, you need to call the deposit function like",
            "Even though there are no actionable changes short-term, some change will be actionable mid- to long-term.",
            "As described here, the v3 fees have a different structure now. Eventually the redundant fields capitalFeePct, capitalFeeTotal, relayGasFeePct, relayGasFeeTotal and lpFeePct will be removed",
            "All users of Across+ (Composable Bridging) are required to upgrade their messaging implementations to use handleV3AcrossMessage().",
            "Across v3 updates the callback interface for receiving messages in a recipient contract. The new function prototype is as follows:",
            " The key differences to Across v2 are:",
            "handleAcrossMessage() -> handleV3AcrossMessage",
            "Function parameter `bool fillCompleted` has been removed.",
            "For a smooth transition to Across v3, integrators are recommended to implement concurrent support for handleAcrossMessage() and handleV3AcrossMessage(). handleAcrossMessage() can be removed at a later date.",
            "The motivation for updating the function prototype is that partial fills are no longer possible in Across v3, so messaging recipients no longer require special logic to account for them.",
            "If you depend on querying SpokePool events to track the status of bridge transfers, then this section is designed to support you.",
            "In Across V2, a bridge consists of a FundsDeposited event (emitted by a deposit() call) on the origin chain and a FilledRelay event on the destination chain. They must match on all common parameters and the FilledRelay#realizedLpFeePct must be equal to the LP fee at the FundsDeposited#quoteTimestamp based on the computation rules described in the UMIP. Moreover, the FilledRelay#destinationToken also needs to match the FundsDeposited#originToken based on the matching rules described in the UMIP.",
            "In Across V3, the deposit() call now emits a V3FundsDeposited event, which must match with a V3FilledRelay event as explained below. This means that FundsDeposited events (V2 events) will no longer be emitted.",
            "Across V3 bridge transfers consist of a V3FundsDeposited event emitted on the origin chain and a FilledV3Relay event emitted on the destination chain.",
            "V3FundsDeposited and FilledV3Relay must match on all common parameters except for outputToken. This can be set to 0x0 (the zero address) at deposit time to signal to relayers that they should use the \"equivalent\" token on the destinationChainId to fill the deposit, therefore if V3FundsDeposited#outputToken == 0x0 then FilledV3Relay#outputToken must be equal to the \"equivalent\" token on the destination chain. The Across UMIP should be updated to explain what it means to be \"equivalent\" but this essentially means the output and input token map to the same token on Ethereum, for example they could be the different USDC addresses on different L2s.",
            "Note that the amount transferred to the recipient is relayExecutionInfo.updatedOutputAmount",
            "This is an abridged summary of important breaking changes for Relayers to be aware of. ",
            "All deposits emitted in V3 contracts will be V3FundsDeposited events which can only be filled via SpokePool#filledV3Relay.",
            "The important changes here are:",
            "realizedLpFeePct The relayer no longer needs to set the realizedLpFeePct as a parameter when calling the fill function. LP fees will still be charged to relayers at refund time (i.e. they will receive the inputAmount minus the LP fees) and these fees will still be computed using the formula in the UMIP based on the deposit.quoteTimestamp. This is a nice quality of life improvement for relayers who will still need to compute the LP fee for a deposit but can use a much wider margin of error, as this fee will only be important for computing their profitability and they will not be at risk of sending an invalid fill if this fee is off by a small amount.",
            "outputToken: See the section above about how outputToken must be set if FundsDeposited#outputToken == 0x0. This should be set to the \"equivalent\" token for the destination chain in this case.",
            "No partial fills: it is not possible to send partial fills in V3.",
            "Slow fills: Slow fills will be requested via a new function requestSlowFill. Slow fills can only be requested on deposits where the inputToken and outputToken are \"equivalent\". Slow fills will pay out the inputAmount * realizedLpFeePct, which will be set as the slow fill's updatedOutputAmount",
            "The deposit interface will not change. The function will however emit a new event V3FundsDeposited as outlined in Across V3 Events. The fillDeadline will be set to MAX_UINT, meaning that the deposit will never expire and be refunded to the origin chain. The outputToken will be set to 0x0 to signal to depositors that the \"equivalent\" output token should be replaced at fill time. The exclusivityDeadline and exclusiveRelayer will be set to 0 and 0x0 respectively suggesting that there is no exclusivity period. Finally, the outputAmount will be equal to  inputAmount * (1 - totalRelayFeePct). You can read more about setting this output amount value here.",
            "To speed up a deposit, a new function will need to be used. Previously this was named speedUpDeposit and the new function to speed up a V3FundsDeposited event will be speedUpV3Deposit.",
            "Last updated 6 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Recipient contracts implementing \nhandleAcrossMessage\n must now replace that with a \nhandleAcrossV3Message\n call. \nDetails\n.\nAcross V2 events including \nFundsDeposited\n will no longer be emitted. These will be replaced with V3 events. \nDetails\n.\nRelayers must now fill all deposits with a new function, \nfillV3Relay()\n. \nDetails\n.\nDepositors who wish to speed up their deposits must now use \nspeedUpV3Deposit()\n instead of \nrequestSpeedUpDeposit()\n. \nDetails\n.",
            "Updated from \nacross.to/api\n to \napp.across.to/api",
            "handleAcrossMessage() -> handleV3AcrossMessage\nFunction parameter `bool fillCompleted` has been removed.",
            "realizedLpFeePct\n The relayer no longer needs to set the \nrealizedLpFeePct\n as a parameter when calling the fill function. LP fees will still be charged to relayers at refund time (i.e. they will receive the inputAmount minus the LP fees) and these fees will still be computed using the formula in the UMIP based on the \ndeposit.quoteTimestamp.\n This is a nice quality of life improvement for relayers who will still need to compute the LP fee for a deposit but can use a much wider margin of error, as this fee will only be important for computing their profitability and they will not be at risk of sending an invalid fill if this fee is off by a small amount.\noutputToken:\n See the section above about how \noutputToken\n must be set if FundsDeposited#outputToken == 0x0. This should be set to the \"equivalent\" token for the destination chain in this case.\nNo partial fills: it is not possible to send partial fills in V3.\nSlow fills: Slow fills will be requested via a new function \nrequestSlowFill\n. Slow fills can only be requested on deposits where the \ninputToken\n and \noutputToken\n are \"equivalent\". Slow fills will pay out the \ninputAmount * realizedLpFeePct\n, which will be set as the slow fill's \nupdatedOutputAmount",
            "Introduction\nSummary of Breaking Changes\nAcross API migration guide\nOverview\nNon-breaking changes\nHost\nBreaking changes (mid- to long-term)\nChanges to Across Smart Contracts\nBreaking Change: Across+ (Composable Bridging) \nEvents\nImportant changes for Relayers\nImportant changes for dApp Developers"
        ],
        "tables": [],
        "code_blocks": [
            {
                "id": "SVCsLx4SiDTK",
                "code": "type FeesResponse = {\n    // ... other fields\n    capitalFeePct: string;\n    capitalFeeTotal: string;\n    relayGasFeePct: string;\n    relayGasFeeTotal: string;\n    relayFeePct: string; // capitalFeePct + gasFeePct\n    relayFeeTotal: string; // capitalFeeTotal + gasFeeTotal\n    lpFeePct: string;\n}"
            },
            {
                "id": "rAIYKDM7yIF6",
                "code": "const tx = await spokePool.deposit(\n    // ... other args\n    feesResponse.relayFeePct // capitalFeePct + gasFeePct\n)"
            },
            {
                "id": "hpReNKs0qna0",
                "code": "const totalBridgeFeePct =  relayFeePct + lpFeePct"
            },
            {
                "id": "fcrSzsq9oYCz",
                "code": "type FeesResponse = {\n    // ... other fields\n    capitalFeePct: string;\n    capitalFeeTotal: string;\n    relayGasFeePct: string;\n    relayGasFeeTotal: string;\n-   relayFeePct: string; // capitalFeePct + gasFeePct\n+   relayFeePct: string; // capitalFeePct + gasFeePct + lpFeePct\n-   relayFeeTotal: string; // capitalFeeTotal + gasFeeTotal\n+   relayFeeTotal: string; // capitalFeeTotal + gasFeeTotal + lpFeeTotal\n-   lpFeePct: string;\n+   lpFeePct: \"0\";\n}"
            },
            {
                "id": "iGrBamrwrfHN",
                "code": "type FeesResponse = {\n     // ... other fields\n+    totalRelayFee: { // relayerCapitalFee + relayerGasFee + lpFee\n+        pct: string;\n+        total: string;\n+    };\n+    relayerCapitalFee: {\n+        pct: string;\n+        total: string;\n+    };\n+    relayerGasFee: {\n+        pct: string;\n+        total: string;\n+    };\n+    lpFee: {\n+        pct: string;\n+        total: string;\n+    };\n}"
            },
            {
                "id": "QsGVcrqmZp6V",
                "code": "const tx = await spokePool.deposit(\n    // ... other args\n    feesResponse.totalRelayFee.pct\n)"
            },
            {
                "id": "vckkMbsv7VhO",
                "code": "type FeesResponse = {\n    // ... other fields\n-    capitalFeePct: string;\n-    capitalFeeTotal: string;\n-    relayGasFeePct: string;\n-    relayGasFeeTotal: string;\n-    relayFeePct: string; // capitalFeePct + gasFeePct\n-    relayFeeTotal: string; // capitalFeeTotal + gasFeeTotal\n-    lpFeePct: string;\n+    totalRelayFee: { // relayerCapitalFee + relayerGasFee + lpFee\n+        pct: string;\n+        total: string;\n+    };\n+    relayerCapitalFee: {\n+        pct: string;\n+        total: string;\n+    };\n+    relayerGasFee: {\n+        pct: string;\n+        total: string;\n+    };\n+    lpFee: {\n+        pct: string;\n+        total: string;\n+    };\n}"
            },
            {
                "id": "phMsooYiCACE",
                "code": "function handleV3AcrossMessage(\n    address tokenSent,\n    uint256 amount,\n    address relayer,\n    bytes memory message\n) external;"
            },
            {
                "id": "56AOsivasEJE",
                "code": "event FundsDeposited(\n    uint256 amount,\n    uint256 originChainId,\n    uint256 indexed destinationChainId,\n    int64 relayerFeePct,\n    uint32 indexed depositId,\n    uint32 quoteTimestamp,\n    address originToken,\n    address recipient,\n    address indexed depositor,\n    bytes message\n)\n\nevent FilledRelay(\n    uint256 amount,\n    uint256 totalFilledAmount,\n    uint256 fillAmount,\n    uint256 repaymentChainId,\n    uint256 indexed originChainId,\n    uint256 destinationChainId,\n    int64 relayerFeePct,\n    int64 realizedLpFeePct,\n    uint32 indexed depositId,\n    address destinationToken,\n    address relayer,\n    address indexed depositor,\n    address recipient,\n    bytes message,\n    RelayExecutionInfo updatableRelayData\n)\n\nstruct RelayExecutionInfo {\n    address recipient;\n    bytes message;\n    int64 relayerFeePct;\n    bool isSlowRelay;\n    int256 payoutAdjustmentPct;\n}"
            },
            {
                "id": "YHAC7jYBmLrV",
                "code": "// Fill type is emitted in the FilledRelay event to assist Dataworker with determining which types of\n// fills to refund (e.g. only fast fills) and whether a fast fill created a sow fill excess.\nenum FillType {\n    FastFill,\n    // Fast fills are normal fills that do not replace a slow fill request.\n    ReplacedSlowFill,\n    // Replaced slow fills are fast fills that replace a slow fill request. This type is used by the Dataworker\n    // to know when to send excess funds from the SpokePool to the HubPool because they can no longer be used\n    // for a slow fill execution.\n    SlowFill\n    // Slow fills are requested via requestSlowFill and executed by executeSlowRelayLeaf after a bundle containing\n    // the slow fill is validated.\n}\n\n struct V3RelayExecutionEventInfo {\n    address updatedRecipient;\n    bytes updatedMessage;\n    uint256 updatedOutputAmount;\n    FillType fillType;\n}\n\nevent V3FundsDeposited(\n    address inputToken,\n    address outputToken,\n    uint256 inputAmount,\n    uint256 outputAmount,\n    uint256 indexed destinationChainId,\n    uint32 indexed depositId,\n    uint32 quoteTimestamp,\n    uint32 fillDeadline,\n    uint32 exclusivityDeadline,\n    address indexed depositor,\n    address recipient,\n    address exclusiveRelayer,\n    bytes message\n);\n\nevent FilledV3Relay(\n    address inputToken,\n    address outputToken,\n    uint256 inputAmount,\n    uint256 outputAmount,\n    uint256 repaymentChainId,\n    uint256 indexed originChainId,\n    uint32 indexed depositId,\n    uint32 fillDeadline,\n    uint32 exclusivityDeadline,\n    address exclusiveRelayer,\n    address indexed relayer,\n    address depositor,\n    address recipient,\n    bytes message,\n    V3RelayExecutionEventInfo relayExecutionInfo\n);"
            },
            {
                "id": "ETUkFVUB2m3p",
                "code": "/**\n * @notice Fulfill request to bridge cross chain by sending specified output tokens to the recipient.\n * @dev The fee paid to relayers and the system should be captured in the spread between output\n * amount and input amount when adjusted to be denominated in the input token. A relayer on the destination\n * chain will send outputAmount of outputTokens to the recipient and receive inputTokens on a repayment\n * chain of their choice. Therefore, the fee should account for destination fee transaction costs, the\n * relayer's opportunity cost of capital while they wait to be refunded following an optimistic challenge\n * window in the HubPool, and a system fee charged to relayers.\n * @dev The hash of the relayData will be used to uniquely identify the deposit to fill, so\n * modifying any params in it will result in a different hash and a different deposit. The hash will comprise\n * all parameters passed to depositV3() on the origin chain along with that chain's chainId(). This chain's\n * chainId() must therefore match the destinationChainId passed into depositV3.\n * Relayers are only refunded for filling deposits with deposit hashes that map exactly to the one emitted by the\n * origin SpokePool therefore the relayer should not modify any params in relayData.\n * @dev Cannot fill more than once. Partial fills are not supported.\n * @param relayData struct containing all the data needed to identify the deposit to be filled. Should match\n * all the same-named parameters emitted in the origin chain V3FundsDeposited event.\n * - depositor: The account credited with the deposit who can request to \"speed up\" this deposit by modifying\n * the output amount, recipient, and message.\n * - recipient The account receiving funds on this chain. Can be an EOA or a contract. If\n * the output token is the wrapped native token for the chain, then the recipient will receive native token if\n * an EOA or wrapped native token if a contract.\n * - inputToken: The token pulled from the caller's account to initiate the deposit. The equivalent of this\n * token on the repayment chain will be sent as a refund to the caller.\n * - outputToken The token that the caller will send to the recipient on the destination chain. Must be an\n * ERC20.\n * - inputAmount: This amount, less a system fee, will be sent to the caller on their repayment chain of choice as a refund\n * following an optimistic challenge window in the HubPool.\n * - outputAmount: The amount of output tokens that the caller will send to the recipient.\n * - originChainId: The origin chain identifier.\n * - exclusiveRelayer The relayer that will be exclusively allowed to fill this deposit before the\n * exclusivity deadline timestamp.\n * - fillDeadline The deadline for the caller to fill the deposit. After this timestamp,\n * the fill will revert on the destination chain.\n * - exclusivityDeadline: The deadline for the exclusive relayer to fill the deposit. After this\n * timestamp, anyone can fill this deposit.\n * - message The message to send to the recipient if the recipient is a contract that implements a\n * handleV3AcrossMessage() public function\n * @param repaymentChainId Chain of SpokePool where relayer wants to be refunded after the challenge window has\n * passed. Will receive inputAmount of the equivalent token to inputToken on the repayment chain.\n */\nfunction fillV3Relay(V3RelayData calldata relayData, uint256 repaymentChainId)\n\n// This struct represents the data to fully specify a **unique** relay submitted on this chain.\n// This data is hashed with the chainId() and saved by the SpokePool to prevent collisions and protect against\n// replay attacks on other chains. If any portion of this data differs, the relay is considered to be\n// completely distinct.\nstruct V3RelayData {\n    // The address that made the deposit on the origin chain.\n    address depositor;\n    // The recipient address on the destination chain.\n    address recipient;\n    // This is the exclusive relayer who can fill the deposit before the exclusivity deadline.\n    address exclusiveRelayer;\n    // Token that is deposited on origin chain by depositor.\n    address inputToken;\n    // Token that is received on destination chain by recipient.\n    address outputToken;\n    // The amount of input token deposited by depositor.\n    uint256 inputAmount;\n    // The amount of output token to be received by recipient.\n    uint256 outputAmount;\n    // Origin chain id.\n    uint256 originChainId;\n    // The id uniquely identifying this deposit on the origin chain.\n    uint32 depositId;\n    // The timestamp on the destination chain after which this deposit can no longer be filled.\n    uint32 fillDeadline;\n    // The timestamp on the destination chain after which any relayer can fill the deposit.\n    uint32 exclusivityDeadline;\n    // Data that is forwarded to the recipient.\n    bytes message;\n}\n\nstruct V3SlowFill {\n    V3RelayData relayData;\n    uint256 chainId;\n    uint256 updatedOutputAmount;\n}"
            },
            {
                "id": "HYKiDnC9woSm",
                "code": "function depositV3(\n    address depositor,\n    address recipient,\n    address inputToken,\n    address outputToken,\n    uint256 inputAmount,\n    uint256 outputAmount,\n    uint256 destinationChainId,\n    address exclusiveRelayer,\n    uint32 quoteTimestamp,\n    uint32 fillDeadline,\n    uint32 exclusivityDeadline,\n    bytes calldata message\n) external payable;\n\n// Old function:\nfunction deposit(\n    address recipient,\n    address originToken,\n    uint256 amount,\n    uint256 destinationChainId,\n    int64 relayerFeePct,\n    uint32 quoteTimestamp,\n    bytes memory message,\n    uint256 maxCount\n) external payable;"
            },
            {
                "id": "VLgkj3Is52Sr",
                "code": "function speedUpV3Deposit(\n    address depositor,\n    uint32 depositId,\n    uint256 updatedOutputAmount,\n    address updatedRecipient,\n    bytes calldata updatedMessage,\n    bytes calldata depositorSignature\n) external;\n\n// Old function:\nfunction speedUpDeposit(\n    address depositor,\n    int64 updatedRelayerFeePct,\n    uint32 depositId,\n    address updatedRecipient,\n    bytes memory updatedMessage,\n    bytes memory depositorSignature\n) external;"
            }
        ],
        "summaries": []
    },
    "https://docs.across.to/introduction/migration-guides/migration-to-cctp": {
        "title": "Migration to CCTP | Across Docs",
        "headers": [
            "Migration to CCTP",
            "Introduction",
            "Summary of Product Changes",
            "There are non-breaking changes for Relayers and partners who call the API and Smart Contracts",
            "Why should Across migrate to CCTP?",
            "CCTP increases capital efficiency of LP funds",
            "CCTP will reduce LP fees on average for end users",
            "CCTP does not introduce new trust assumptions for LPs or users",
            "How will the CCTP Migration be executed?"
        ],
        "paragraphs": [
            "Across' intent protocol relies on canonical bridges to lend LP capital to third party relayers, who in turn fast fill user orders. CCTP is the canonical bridge of Native USDC. While CCTP is much faster than the latency of optimistic L2 canonical bridges, it is still comparatively slow (on the order of minutes) relative to users expectations (on the order of seconds). Across is migrating to use CCTP as the canonical bridge for USDC, but not simply as a pass-through service. ",
            "Through its network of fast relayers and aggregated settlement, Across will offer faster and cheaper bridging of USDC and leverage CCTP to rebalance USDC at the protocol level with less latency, thus increasing capital efficiency and reducing fees for users without increasing trust assumptions. ",
            "Currently, Across only supports setting Bridged USDC as the inputToken when specifying an L2 deposit. Post migration, Across will only allow Native USDC as the inputToken in deposits, with support for Bridged USDC possible via a swap on origin, prior to deposit. ",
            "Currently, for L2 origin or destinations, Across only supports Bridged USDC (on the origin) to Bridged USDC (on the destination) transfers. Post migration, Across will no longer support Bridged USDC to Bridged USDC routes, and will support the following new routes:",
            "On Ethereum, Polygon, Optimism, Arbitrum, Base:",
            "Native USDC to Bridged USDC cross-chain swaps",
            "Native USDC to Native USDC cross-chain transfers",
            "The Across dApp will also support Bridged-to-Native and Bridged-to-Bridged USDC swaps and transfers by swapping from the users' input asset of Bridged USDC to Native USDC on the origin chain, then depositing Native USDC into Across contracts. But this functionality will not be embedded in across contracts or API. ",
            "Eventually, all current L2's with Bridged USDC support on Across migrate to Native USDC support via Circle's Cross Chain Transfer Protocol (CCTP).",
            "This migration will require temporary downtime for USDC deposit routes for each chain where CCTP is being added. The end effect of the migration is that all Bridged USDC deposit routes will be replaced by Native USDC deposit routes on the CCTP-enabled chains.",
            "Relayers and integrations must migrate from Across V2 to V3 as a pre-requisite. ",
            "Depositors will be able to use the depositV3smart contract function to bridge Native USDC to Bridged USDC, but setting Bridged USDC as the inputToken will no longer be supported. This might require integrators to upgrade smart contracts to get access to the Native USDC to Bridged USDC routes. The deposit function will continue to work as normal but Bridged USDC routes will no longer be available. Relayers should be prepared to handle the case where Native USDC is bridged to Bridged USDC. The suggested fees API endpoint will add parameters to support the new routes, and all changes will be backwards compatible. Please see the Relayer Migration Guide and API Migration Guide for more details. ",
            "Finally, API users must update to reference host of app.across.to/api and reference the new fees object in the response of the /suggested-fees endpoint. ",
            "Sending bridged USDC between the L1 HubPool and L2 SpokePools is subject to the same liveness period as the L2's canonical messaging bridge, which is seven days for optimistic rollups and several hours for ZK-rollups. Sending native USDC via CCTP will be much faster, completing in minutes. This has several key benefits for the Across protocol.",
            "Whenever the Across proposes sending L2 tokens to the L1 HubPool, those L2 tokens are sent over the L2's canonical bridge and are effectively frozen and unable to be used by Across until they are released following a liveness window. These funds cannot be used to to repay relayers or execute Slow Fills.",
            "Using CCTP to send USDC between L2 and L1 system contracts, Across can more frequently recycle USDC to repay relayers and execute slow fills. This means that less USDC needs to be deposited by LPs to support the same volume of USDC over some time period pre and post CCTP migration.",
            "By reducing the time that USDC is held in canonical token bridges, USDC utilization should be reduced on average, thereby reducing the LP fee component of bridge fees.",
            "Across only uses canonical bridges to send tokens and messages between its L1 and L2 contracts. This means that when Across' LP funds are transferred between L1 and L2, those funds are exposed only to the same security assumptions that users would face if they simply held those funds on the L2. These canonical bridges are secured by the same mechanism that any user submitting a transaction or holding an asset on the L2 faces. ",
            "CCTP is the canonical token bridge for Native USDC. Any holder of USDC implicitly trusts Circle, the issuer of USDC, to not censor their transaction or otherwise \"misbehave\". CCTP is run by Circle, so sending USDC over CCTP does not add additional trusted actors to the Across system.",
            "To upgrade any chain from supporting Bridged USDC to Native USDC, USDC deposits to and from that chain will have to be paused temporarily. ",
            "Next, all Bridged USDC should be returned to the HubPool. The Across owner account will then need to upgrade the HubPool's PoolRebalanceRoutes to point from Bridged to Native USDC for the given chain. The chain's SpokePool and L1 Adapter will also need to be upgraded by the owner to send USDC over CCTP using an adapter like this.",
            "Once all contracts and pool rebalance routes are upgraded, deposits can be resumed for the selected chain. After this point, the only type of USDC to be held on the chain's SpokePool will be Native USDC.",
            "Last updated 6 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "On Ethereum, Polygon, Optimism, Arbitrum, Base:\nNative USDC to Bridged USDC cross-chain swaps\nNative USDC to Native USDC cross-chain transfers",
            "Native USDC to Bridged USDC cross-chain swaps\nNative USDC to Native USDC cross-chain transfers",
            "Introduction\nSummary of Product Changes\nThere are non-breaking changes for Relayers and partners who call the API and Smart Contracts\nWhy should Across migrate to CCTP?\nCCTP increases capital efficiency of LP funds\nCCTP will reduce LP fees on average for end users\nCCTP does not introduce new trust assumptions for LPs or users\nHow will the CCTP Migration be executed?"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/introduction/migration-guides/migration-to-cctp/migration-guide-for-relayers": {
        "title": "Migration Guide for Relayers | Across Docs",
        "headers": [
            "Migration Guide for Relayers",
            "Supporting deposits where outputToken is not the same as inputToken. "
        ],
        "paragraphs": [
            "This is a feature highlighted in the Across V3's depositV3 function but it is currently not supported in the example Relayer implementation. Upon the CCTP migration, deposits will begin to be sent with inputToken = USDC and outputToken = Bridged USDC. ",
            "Eventually, Across will encourage depositors to take advantage of this feature and send other types of cross chain token swaps, for example setting input to USDC and output to WETH. Therefore, relayers should update their code to handle the case when the input USDC (Native) is not the same as the output USDC (Bridged) with an eye towards generalizing the code to handle arbitrary output tokens. But, relayer implementations can choose to temporarily hardcode this specific USDC to Bridged USDC deposit route.",
            "Note, the inputToken must always be a token that Across natively supports. This is why Bridged USDC cannot be an inputToken. However, outputToken can technically be any ERC20 that exists on the destination chain.",
            "Relayers should at minimum be prepared to compute the price of the outputToken relative to the price of the inputToken and normalize the inputAmount and outputAmount to avoid filling unprofitable deposits. To support CCTP, relayers should also be prepared to hold inventory in both Bridged and Native USDC on CCTP-enabled chains.",
            "Last updated 6 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/introduction/migration-guides/migration-to-cctp/migration-guide-for-api-users": {
        "title": "Migration Guide for API Users | Across Docs",
        "headers": [
            "Migration Guide for API Users"
        ],
        "paragraphs": [
            "Following migration to Native USDC on a given L2, API users and depositors of USDC will experience the following changes:",
            "If you are making changes to how you query the Across API, then you should also take the opportunity to change how you handle the API responses. In particular, you should migrate to the new host at app.across.to/api and the new suggested-fees response format which deprecates redundant fields.",
            "/available-routes will replace Bridged USDC addresses with Native USDC addresses for any origin chains where CCTP is enabled. For example, the following route exists showing that a deposit from Bridged USDC on Polygon to USDC on Ethereum is available:",
            "Following migration to CCTP on Polygon, the above route will replace the originToken Bridged USDC address with the Native USDC address on Polygon.",
            "/available-routes will add routes with Native USDC as a possible destinationToken. For example, the following route shows that a deposit from USDC on Ethereum to Bridged USDC on Optimism is available:",
            "Following migration to CCTP on Optimism, a new route will be available from USDC on Ethereum to Native USDC Optimism:",
            "/suggested-fees and /limits will add inputToken and outputToken as optional query parameters. token will become an optional parameter if inputToken and outputToken are set to valid addresses. The caller will need to set the new input and output parameters in order to get fees for Native USDC to Bridged USDC routes since these will not technically be the \"equivalent\" tokens. The API will infer that the token address is equal to the inputToken and also assume that outputToken should be equal to the equivalent token address. Therefore, token will only be able to be used to get fees for Native USDC to Native USDC routes.",
            "For the forseeable future, the fees returned for routes with Native USDC as the output token and Bridged USDC as the output token will be equivalent. However, this can change so we encourage all API users to migrate as soon as possible to using the new input and output parameters instead of just setting token.",
            "/limits will return different limits for Native USDC and Bridged USDC based on estimated relayer capacity. Since these are different tokens held on L2s by Relayers, these limits can differ quite a bit.",
            "Most API users today query limits and fees before submitting a deposit() function transaction directly to the Across contracts. This function only allows the caller to specify a single originToken address, which means that this function will not support Native USDC to Bridged USDC deposits. Users who want access to the new Native USDC to Bridged USDC routes should instead call depositV3() which allows the caller to specify inputToken and outputToken parameters. We encourage all direct smart contract users to eventually migrate to this new deposit function to get access to cross chain token swaps when they go live. You can think of Native USDC to Bridged USDC as the first cross chain token swap supported by Across. Note that token swaps are currently allowed at the smart contract level but most relayers will not support swaps yet. However, relayers will begin to support the Native USDC to Bridged USDC route upon CCTP migration.",
            "Deposit routes with Bridged USDC as the origin token will no longer be supported at the API and SpokePool contract level. We acknowledge that this might remove a popular route for some partners. We are making this change because we believe that most volume will eventually migrate to Native USDC bridging and some partners already implement origin token swapping before submitting an Across Bridge. For example, some partners already swap Native USDC to Bridged USDC before submitting an Across bridge. We hope that this infrastructure can be reused to swap Bridged USDC into Native USDC before submitting an Across Bridge, but we also acknowledge that this won't always be possible. Therefore, we are deploying the following SwapAndBridge contract to assist with swapping Bridged USDC to Native USDC before submitting an Across deposit. These contracts will be used by our own frontend dApp to continue to support routes with Bridged USDC as the origin token and they have been audited already. We understood that most partners will have to upgrade smart contracts to take advantage of this new flow but we anticipate most partners already either implement origin chain swapping or will be happy to replace Bridged USDC volume with Native USDC volume. If you have any issues or questions about this migration please reach out directly and will work with you to come up with a solution.",
            "Last updated 6 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "/available-routes\n will \nreplace\n Bridged USDC addresses with Native USDC addresses for any origin chains where CCTP is enabled. For example, the following route exists showing that a deposit from Bridged USDC on Polygon to USDC on Ethereum is available:\nCopy\n  ...{\n\n\n    \n\"originChainId\"\n:\n \n137\n,\n\n\n    \n\"originToken\"\n:\n \n\"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\"\n,\n\n\n    \n\"destinationChainId\"\n:\n \n1\n,\n\n\n    \n\"destinationToken\"\n:\n \n\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"\n\n\n  },\n\n\n  ...\nFollowing migration to CCTP on Polygon, the above route will replace the \noriginToken\n Bridged USDC address with the Native USDC address on Polygon.\n/available-routes\n will add routes with Native USDC as a possible \ndestinationToken\n. For example, the following route shows that a deposit from USDC on Ethereum to Bridged USDC on Optimism is available:\nCopy\n ...{\n\n\n    \n\"originChainId\"\n:\n \n1\n,\n\n\n    \n\"originToken\"\n:\n \n\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"\n,\n\n\n    \n\"destinationChainId\"\n:\n \n10\n,\n\n\n    \n\"destinationToken\"\n:\n \n\"0x7F5c764cBc14f9669B88837ca1490cCa17c31607\"\n\n\n  },\n\n\n  ...\n\n\n \nFollowing migration to CCTP on Optimism, a new route will be available from USDC on Ethereum to Native USDC Optimism:\nCopy\n  ...{\n\n\n    \n\"originChainId\"\n:\n \n1\n,\n\n\n    \n\"originToken\"\n:\n \n\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"\n,\n\n\n    \n\"destinationChainId\"\n:\n \n10\n,\n\n\n    \n\"destinationToken\"\n:\n \n\"0x7F5c764cBc14f9669B88837ca1490cCa17c31607\"\n\n\n  },\n\n\n  {\n\n\n    \n\"originChainId\"\n:\n \n1\n,\n\n\n    \n\"originToken\"\n:\n \n\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"\n,\n\n\n    \n\"destinationChainId\"\n:\n \n10\n,\n\n\n    \n\"destinationToken\"\n:\n \n\"0x0b2c639c533813f4aa9d7837caf62653d097ff85\"\n\n\n  },\n/suggested-fees\n and \n/limits\n will add \ninputToken\n and \noutputToken\n as optional query parameters. \ntoken\n will become an optional parameter if \ninputToken\n and \noutputToken\n are set to valid addresses. The caller will need to set the new input and output parameters in order to get fees for Native USDC to Bridged USDC routes since these will not technically be the \"equivalent\" tokens. The API will infer that the \ntoken\n address is equal to the \ninputToken\n and also assume that \noutputToken\n should be equal to the equivalent token address. Therefore, \ntoken\n will only be able to be used to get fees for Native USDC to Native USDC routes.\nFor the forseeable future, the fees returned for routes with Native USDC as the output token and Bridged USDC as the output token will be equivalent. However, this can change so we encourage all API users to migrate as soon as possible to using the new input and output parameters instead of just setting \ntoken\n.\n/limits\n will return different limits for Native USDC and Bridged USDC based on estimated relayer capacity. Since these are different tokens held on L2s by Relayers, these limits can differ quite a bit.\nMost API users today query limits and fees before submitting a \ndeposit()\n function transaction directly to the Across contracts. This function only allows the caller to specify a single \noriginToken\n address, which means that this function will not support Native USDC to Bridged USDC deposits. Users who want access to the new Native USDC to Bridged USDC routes should instead call \ndepositV3()\n which allows the caller to specify \ninputToken\n and \noutputToken\n parameters. We encourage all direct smart contract users to eventually migrate to this new deposit function to get access to cross chain token swaps when they go live. You can think of Native USDC to Bridged USDC as the first cross chain token swap supported by Across. Note that token swaps are currently allowed at the smart contract level but most relayers will not support swaps yet. However, relayers will begin to support the Native USDC to Bridged USDC route upon CCTP migration.\nDeposit routes with Bridged USDC as the origin token will no longer be supported at the API and SpokePool contract level. We acknowledge that this might remove a popular route for some partners. We are making this change because we believe that most volume will eventually migrate to Native USDC bridging and some partners already implement origin token swapping before submitting an Across Bridge. For example, some partners already swap Native USDC to Bridged USDC before submitting an Across bridge. We hope that this infrastructure can be reused to swap Bridged USDC into Native USDC before submitting an Across Bridge, but we also acknowledge that this won't always be possible. Therefore, we are deploying the following \nSwapAndBridge\n contract\n to assist with swapping Bridged USDC to Native USDC before submitting an Across deposit. These contracts will be used by our own frontend dApp to continue to support routes with Bridged USDC as the origin token and they have been \naudited\n already. We understood that most partners will have to upgrade smart contracts to take advantage of this new flow but we anticipate most partners already either implement origin chain swapping or will be happy to replace Bridged USDC volume with Native USDC volume. If you have any issues or questions about this migration please reach out directly and will work with you to come up with a solution.",
            "Following migration to CCTP on Polygon, the above route will replace the \noriginToken\n Bridged USDC address with the Native USDC address on Polygon.",
            "Following migration to CCTP on Optimism, a new route will be available from USDC on Ethereum to Native USDC Optimism:",
            "For the forseeable future, the fees returned for routes with Native USDC as the output token and Bridged USDC as the output token will be equivalent. However, this can change so we encourage all API users to migrate as soon as possible to using the new input and output parameters instead of just setting \ntoken\n.\n/limits\n will return different limits for Native USDC and Bridged USDC based on estimated relayer capacity. Since these are different tokens held on L2s by Relayers, these limits can differ quite a bit."
        ],
        "tables": [],
        "code_blocks": [
            {
                "id": "yTAf9FmVlX3q",
                "code": "...{\n    \"originChainId\": 137,\n    \"originToken\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n    \"destinationChainId\": 1,\n    \"destinationToken\": \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"\n  },\n  ..."
            },
            {
                "id": "3R1OVcYNWKp2",
                "code": "...{\n    \"originChainId\": 1,\n    \"originToken\": \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    \"destinationChainId\": 10,\n    \"destinationToken\": \"0x7F5c764cBc14f9669B88837ca1490cCa17c31607\"\n  },\n  ..."
            },
            {
                "id": "syt7nzGMt053",
                "code": "...{\n    \"originChainId\": 1,\n    \"originToken\": \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    \"destinationChainId\": 10,\n    \"destinationToken\": \"0x7F5c764cBc14f9669B88837ca1490cCa17c31607\"\n  },\n  {\n    \"originChainId\": 1,\n    \"originToken\": \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    \"destinationChainId\": 10,\n    \"destinationToken\": \"0x0b2c639c533813f4aa9d7837caf62653d097ff85\"\n  },"
            }
        ],
        "summaries": []
    },
    "https://docs.across.to/use-cases/instant-bridging-in-your-application": {
        "title": "Instant Bridging in your Application | Across Docs",
        "headers": [
            "Instant Bridging in your Application"
        ],
        "paragraphs": [
            "Provide a fast, reliable and low cost bridging experience alongside your application, enabling users to onboard without leaving your app. Improve conversion and reduce churn. ",
            "This solution is a great fit for apps that want to encourage users to onboard and bridge funds once (or infrequently) so users can then make recurring, or subsequent, actions in the application.",
            "The Bridge Integration Guide contains technical instructions for using our API to provide bridge quotes to your users. It is a simple two step integration process:",
            "Request quotes from Across GET /suggested-fees API",
            "Initiate a deposit by using data returned from Across API to call functions on Across smart contracts",
            "See Multi Chain Bridge UI Guide or Single Chain Bridge UI Guide for recommended UI and UX patterns in providing a bridge experience to your users. ",
            "If you have further questions or suggestions for this guide, please send a message to the #developer-questions channel in the Across Discord.",
            "",
            "Last updated 2 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/use-cases/instant-bridging-in-your-application/bridge-integration-guide": {
        "title": "Bridge Integration Guide | Across Docs",
        "headers": [
            "Bridge Integration Guide",
            "Request a Quote",
            "Initiating a Deposit (User Intent)",
            "Updating Deposits",
            "Tracking Deposits",
            "Technical FAQ"
        ],
        "paragraphs": [
            "This guide contains technical instructions for using our API to provide bridge quotes to your users via bridge experience alongside your application. It is a simple two step integration process:",
            "Request quotes from Across API",
            "Use data returned to call functions on Across smart contracts (initiate a deposit)",
            "The process for initiating a deposit begins with determining the fee that needs to be paid to the relayer. To do this, you can use the suggested-fees endpoint: app.across.to/api/suggested-fees with the following query parameters:",
            "originChainId: chainId where the user's deposit is originating",
            "destinationChainId: chainId where the user intends to receive their funds",
            "token: the address of the token that the user is depositing on the origin chain",
            "amount: the raw amount the user is transferring. By raw amount, this means it should be represented exactly as it is in Solidity, meaning 1 USDC would be 1e6 or 1 ETH would be 1e18.",
            "Example for a user transferring 1000 USDC from Ethereum to Optimism:",
            "There are two elements of the response that you'll need to create the deposit:",
            "totalRelayFee.total: this is the amount of the deposit that the user will need to pay to have it relayed. It is intended to capture all fees, including gas fees, relayer fees, and system fees.",
            "timestamp: this is the quote timestamp. Specifying this timestamp onchain ensures that the system fees don't shift under the user while the intent is in-flight.",
            "To determine how long a fill is expected to take and to ensure that Across can process a deposit of a given size, you'll want to refer the following elements of the response:",
            "fillSpeedType: one of instant, shortDelay or slow corresponding to an instant fill (within seconds), short delay (within 5-15 minutes) or slow (~3 hours)",
            "estimateFillTimeSec = the estimated fill time, for the specified route and asset, in seconds",
            "The above values depend on the amount in the request relative to the following limit elements of the response:",
            "maxDepositInstant: if the user's amount is less than or equal to this amount, there is known to be enough relayer liquidity on the destination chain to fill them instantly, within seconds",
            "maxDepositShortDelay: if the user's deposit amount is larger than maxDepositInstant, and less than or equal to this amount, there is known to be enough relayer liquidity that can be moved to the destination chain to fill the user within 30 minutes",
            "maxDeposit: if the user's deposit amount is larger than maxDepositShortDelay, and less than or equal to this amount, there is enough liquidity in Across to fill them via a slow fill, which could take up to 3 hours. In most cases maxDeposit will be equal to maxDepositShortDelay to reduce the likelihood of slow fills. If the user's deposit amount is larger than this, Across cannot fulfill the user's intent",
            "reccommendedDepositInstant: this is used for certain integrations to limit the input size, and is currently hardcoded to 2 ETH/WETH and 5,000 USDC",
            "You can find details on the Across API here. ",
            "Deposits are initiated by interacting with contracts called SpokePools. There is one SpokePool deployed on each chain supported by Across. Each SpokePool has minor modifications to work with each chain, but maintains the same core interface and implementation. For example, on Ethereum the SpokePool contract is named Ethereum_SpokePool.sol, and on Optimism the contract is named Optimism_SpokePool.sol.",
            "Before making the call, you'll need the SpokePool address. This can be retrieved from the suggested-fees response for convenience, but we suggest manually verifying these and hardcoding them per chain in your application for security. You can find the addresses here.",
            "Once you have the SpokePool address, you'll need to approve the SpokePool to spend tokens from the user's EOA or the contract that will be calling the SpokePool . The approval amount must be >= the amount value. If sending ETH, no approval is necessary.",
            "The deposit call can come from an intermediary contract or directly from the user's EOA. This is the function that needs to be called:",
            "Here is an example of how the parameters could be populated in Javascript:",
            "and in Solidity (see also the Javascript descriptions above):",
            "In order to track the origination source for deposits for analytics, debugging and support purposes we request all integrators to append a delimiter of 1dc0de and a unique identifier provided by our team to the deposit transaction call data. ",
            "Here is an example of depositV3 call data with 1dc0de delimiter and f001 unique identifier appended. ",
            "Do NOT pass delimiter + identifier to any depositV3 param, including the message param. Only append to call data of the transaction. ",
            "",
            "Do NOT use f001 identifier in your implementation, see below on how to request your unique ID. ",
            "Request your unique identifier in our shared communication channel (TG, Slack, etc), if already set up, or reach out to [email¬†protected]. Please do not use any other identifier other than the one provided to you.",
            "Relayer fees are a function of the spread between the outputAmount and inputAmount parameters of a  depositV3. If this spread is too low, it may not be profitable for relayers to fill. While a deposit is not filled, the outputAmount can be increased by calling speedUpDepositV3 , which requires a signature from the depositor address. If fees are set according to the above instructions, this functionality should not be needed. ",
            "To track the lifecycle of a deposit you can use the app.across.to/api/deposit/status endpoint with the following parameters:",
            "originChainId: chain Id where the deposit originated from",
            "depositId: The deposit id that is emitted from the DepositV3 function call as a V3FundsDeposited event",
            "The recommended solution for tracking all Across deposits originating from your integration, for a single user, is to store the user's  depositId and originChainId from each transaction originating from your app, and then get the status of each via the above endpoint. ",
            "We also provide a deeper explanation to implement your service to track events in Tracking Events.",
            "Last updated 1 month ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "originChainId\n: chainId where the user's deposit is originating\ndestinationChainId\n: chainId where the user intends to receive their funds\ntoken\n: the address of the token that the user is depositing on the origin chain\namount\n: the raw amount the user is transferring. By raw amount, this means it should be represented exactly as it is in Solidity, meaning 1 USDC would be 1e6 or 1 ETH would be 1e18.",
            "totalRelayFee.total\n: this is the amount of the deposit that the user will need to pay to have it relayed. It is intended to capture all fees, including gas fees, relayer fees, and system fees.\ntimestamp\n: this is the quote timestamp. Specifying this timestamp onchain ensures that the system fees don't shift under the user while the intent is in-flight.",
            "fillSpeedType\n: one of \ninstant\n, \nshortDelay\n or \nslow\n corresponding to an instant fill (within seconds), short delay (within 5-15 minutes) or slow (~3 hours)\nestimateFillTimeSec\n = the estimated fill time, for the specified route and asset, in seconds",
            "originChainId\n: chain Id where the deposit originated from\ndepositId\n: The deposit id that is emitted from the \nDepositV3\n function call as a \nV3FundsDeposited\n event",
            "Request a Quote\nInitiating a Deposit (User Intent)\nUpdating Deposits\nTracking Deposits"
        ],
        "tables": [],
        "code_blocks": [
            {
                "id": "RCkDoUHmKoyS",
                "code": "curl \"https://app.across.to/api/suggested-fees?token=0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&originChainId=1&destinationChainId=10&amount=1000000000\""
            },
            {
                "id": "Gt6gkiQhJjlR",
                "code": "function depositV3(\n  address depositor,\n  address recipient,\n  address inputToken,\n  address outputToken,\n  uint256 inputAmount,\n  uint256 outputAmount,\n  uint256 destinationChainId,\n  address exclusiveRelayer,\n  uint32 quoteTimestamp,\n  uint32 fillDeadline,\n  uint32 exclusivityDeadline,\n  bytes calldata message\n) external;"
            },
            {
                "id": "qh0dQu4i287a",
                "code": "const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\n// Bridge to the same address on the destination chain.\n// Note: If the depositor is not an EOA then the depositor's address\n// might not be valid on the destination chain.\nconst depositor = <USER_ADDRESS>;\nconst recipient = depositor;\n\n// Test WETH deposit.\nconst inputToken = <ORIGIN_CHAIN_WETH_ADDRESS>;\n\n// The 0 address is resolved automatically to the equivalent supported\n// token on the the destination chain. Any other input/output token\n// combination should be advertised by the Across API available-routes\n// endpoint.\nconst outputToken = ZERO_ADDRESS;\n\n// The outputAmount is set as the inputAmount - relay fees.\n// totalRelayFee.total is returned by the Across API suggested-fees\n// endpoint.\nconst outputAmount = inputAmount.sub(BigNumber.from(response.totalRelayFee.total));\n\n// fillDeadline: A fill deadline of 5 hours. Can be up to\n// SpokePool.getCurrentTime() + SpokePool.fillDeadlineBuffer() seconds.\nconst fillDeadlineBuffer = 18000;\nconst fillDeadline = Math.round(Date.now() / 1000) + fillDeadlineBuffer;\n\n// timestamp is returned by the Across API suggested-fees endpoint.\n// This should be _at least 2_ mainnet blocks behind the current time\n// for best service from relayers.\nconst quoteTimestamp = response.timestamp;\n\n// Exclusive relayer and exclusivity deadline should be taken from the\n// Across API suggested-fees response.\nconst exclusivityDeadline = response.exclusivityDeadline;\nconst exclusiveRelayer = response.exclusiveRelayer;\n\n// No message will be executed post-fill on the destination chain.\n// See `Across+ Integration` for more information.\nconst message = \"0x\";\n\nspokePool.depositV3(\n  depositor,\n  recipient,\n  inputToken,\n  outputToken,\n  inputAmount,\n  outputAmount,\n  destinationChainId,\n  exclusiveRelayer,\n  quoteTimestamp,\n  fillDeadline,\n  exclusivityDeadline,\n  message\n)"
            },
            {
                "id": "eC7szjB8TfpO",
                "code": "spokePool.depositV3(\n  depositor, // User's address on the origin chain.\n  recipient, // Receiving address on the destination chain.\n  weth, // inputToken. This is the WETH address on the origin chain.\n  address(0), // outputToken: Auto-resolve the destination equivalent token.\n  inputAmount,\n  inputAmount - totalRelayFee, // outputAmount\n  destinationChainId,\n  exclusiveRelayer, // exclusiveRelayer from suggested-fees, or 0x0 to disable\n  quoteTimestamp, // suggested-fees timestamp, or block.timestamp - 36\n  block.timestamp + spokePool.fillDeadlineBuffer(),\n  exclusivityDeadline, // exclusivityDeadline from suggested-fees, or 0 to disable\n  \"\", // message (empty)\n);"
            },
            {
                "id": "ksTRjfFcwhre",
                "code": "Function: depositV3(address depositor,address recipient,address inputToken,address outputToken,uint256 inputAmount,uint256 outputAmount,uint256 destinationChainId,address exclusiveRelayer,uint32 quoteTimestamp,uint32 fillDeadline,uint32 exclusivityDeadline,bytes message)\n\n0x7b939232000000000000000000000000c30c7ea910a71ce06ae840868b0c7e47616ba4c9000000000000000000000000c30c7ea910a71ce06ae840868b0c7e47616ba4c9000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000000000009502f9000000000000000000000000000000000000000000000000000000000094fd2f84000000000000000000000000000000000000000000000000000000000000a4b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066799bfb000000000000000000000000000000000000000000000000000000006679f0f40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000001dc0def001"
            }
        ],
        "summaries": []
    },
    "https://docs.across.to/use-cases/instant-bridging-in-your-application/multi-chain-bridge-ui-guide": {
        "title": "Multi Chain Bridge UI Guide | Across Docs",
        "headers": [
            "Multi Chain Bridge UI Guide",
            "Best Practices",
            "Example Flow"
        ],
        "paragraphs": [
            "This UI guide is a counterpart to the technical Bridge Integration Guide and is intended to offer UI and UX patterns developers can implement alongside their core application that has instances on multiple chains, for example on a separate \"Bridge\" tab.",
            "Provide a full bridge (or \"onboarding\") experience in your application, for example on a \"Bridge\" tab.",
            "Default the source chain selector to the currently connected network. ",
            "Don't require users to go to wallet, switch network, then return to app to perform an action. For example, if the user selects a source chain that is not the network they are currently connected to:",
            "1: user clicks the button to perform the action (\"confirm\")",
            "2: wallet prompts user to switch network to the source chain",
            "3: wallet prompts user to execute the bridge",
            "Last updated 2 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Provide a full bridge (or \"onboarding\") experience in your application, for example on a \"Bridge\" tab.\nDefault the source chain selector to the currently connected network. \nDon't require users to go to wallet, switch network, then return to app to perform an action. For example, if the user selects a source chain that is not the network they are currently connected to:\n1: user clicks the button to perform the action (\"confirm\")\n2: wallet prompts user to switch network to the source chain\n3: wallet prompts user to execute the bridge",
            "1: user clicks the button to perform the action (\"confirm\")\n2: wallet prompts user to switch network to the source chain\n3: wallet prompts user to execute the bridge",
            "Best Practices\nExample Flow"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/use-cases/instant-bridging-in-your-application/single-chain-bridge-ui-guide": {
        "title": "Single Chain Bridge UI Guide | Across Docs",
        "headers": [
            "Single Chain Bridge UI Guide",
            "Best Practices",
            "Example Flow"
        ],
        "paragraphs": [
            "This UI guide is a counterpart to the technical Bridge Integration Guide and is intended to offer UI and UX patterns developers can implement alongside their core application on a single chain, for example on a separate \"Bridge\" tab. ",
            "Provide a full bridge or \"onboarding\" experience in your application, for example on a \"Bridge\" tab.",
            "Default the source chain selector to the balance where the user has the most funds of the input asset. The destination chain is the network where the user is interacting with your protocol. ",
            "Don't require users to go to wallet, switch network, then return to app to perform an action. For example, if the user selects a source chain that is not the network they are currently connected to:",
            "1: user clicks the button to perform the action (\"confirm\")",
            "2: wallet prompts user to switch network to the source chain",
            "3: wallet prompts user to execute the bridge",
            "Last updated 2 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Provide a full bridge or \"onboarding\" experience in your application, for example on a \"Bridge\" tab.\nDefault the source chain selector to the balance where the user has the most funds of the input asset. The destination chain is the network where the user is interacting with your protocol. \nDon't require users to go to wallet, switch network, then return to app to perform an action. For example, if the user selects a source chain that is not the network they are currently connected to:\n1: user clicks the button to perform the action (\"confirm\")\n2: wallet prompts user to switch network to the source chain\n3: wallet prompts user to execute the bridge",
            "1: user clicks the button to perform the action (\"confirm\")\n2: wallet prompts user to switch network to the source chain\n3: wallet prompts user to execute the bridge",
            "Best Practices\nExample Flow"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/use-cases/embedded-cross-chain-actions": {
        "title": "Embedded Cross-chain Actions | Across Docs",
        "headers": [
            "Embedded Cross-chain Actions"
        ],
        "paragraphs": [
            "For developers wanting to enable users to seamlessly interact with your dApp or chain using assets from other chains, this guide provides technical instructions for bundling a bridge with user actions. ",
            "This solution is a great fit for apps on a single-chain or that want to expose core actions that users can execute with funds on other chains. It is a future-forward solution that aims to abstract bridging from end-users by making cross-chain actions so fast and cheap that it feels like a single-chain experience. ",
            "The Cross-chain Actions Integration Guidecontains technical instructions for bundling a bridge with user actions. The integration process is simple and consists of three steps:",
            "Craft the message that is the set of transactions to execute on the destination",
            "Request quotes from Across GET /suggested-fees API, passing in the message parameter defined above",
            "Initiate a deposit by using data returned from Across API to call functions on Across smart contracts, specifying a message (set of transactions to execute on the destination)",
            "See Cross-chain Actions Integration Guide for recommended UI and UX patterns. ",
            "Last updated 2 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/use-cases/embedded-cross-chain-actions/cross-chain-actions-integration-guide": {
        "title": "Cross-chain Actions Integration Guide | Across Docs",
        "headers": [
            "Cross-chain Actions Integration Guide",
            "Executing Destination Actions",
            "Append Unique Identifier to CallData",
            "UI Guide"
        ],
        "paragraphs": [
            "This guide provides technical instructions for bundling a bridge with user actions. The integration process is simple and consists of three steps:",
            "Craft the message that is the set of transactions to execute on the destination",
            "Request quotes from Across GET /suggested-fees API, passing in the message parameter defined above",
            "Initiate a deposit by using data returned from Across API to call functions on Across smart contracts, specifying a message (set of transactions to execute on the destination) and appending your integration ID in calldata. ",
            "At a high level, the system works as follows:",
            "End-user (or intermediate contract) includes a message field in the deposit transaction.",
            "To be repaid for the fill, the relayer is required to include the same message field in their fill.",
            "When this message field is non-empty and the recipient is a contract, the SpokePool calls a special handler function on the recipient handler contract with the message (and a few other fields).",
            "This function can do anything, meaning application-specific actions can be executed atomically",
            "This integration requires a handler contract on the destination to \"handle\" (execute) the transactions specified in the message. There are two approaches to implementing this functionality with respect to handler contract. ",
            "(recommended) Use our already-deployed and audited generic \"multicall\" handler contract",
            "Build and implement your own custom handler contract",
            "Each of the below guides provide instruction and examples for the 3 integration steps above. ",
            "The recommended way is to use our already-deployed and audited generic \"multicall\" handler contract. When this contract is set as the recipient address, this contract will atomically execute all contract calls specified in the deposit's message. ",
            "If your use case requires additional customization or complexity, you can build your own custom handler contract to execute the contents provided in the deposit's message. ",
            "The tradeoff of using the generic multicall handler contract is that the complexity is encountered when crafting the message, which must be a correctly-encoded Instructions object. Once the message is formed correctly, you don't need to write any more code. ",
            "On the other hand, when using a custom handler contract, you'll need to implement a custom handleV3AcrossMessage function and deploy a new contract, but creating the deposit message is trivial.",
            "If you have further questions or suggestions for this guide, please send a message to the #developer-questions channel in the Across Discord.",
            "In order to track the origination source for deposits for analytics, debugging and support purposes we request all integrators to append a delimiter of 1dc0de and a unique identifier provided by our team to the deposit transaction call data. ",
            "Here is an example of depositV3 call data with 1dc0de delimiter and f001 unique identifier appended. ",
            "Do NOT pass delimiter + identifier to any depositV3 param, including the message param. Only append to call data of the transaction. ",
            "",
            "Do NOT use f001 identifier in your implementation, see below on how to request your unique ID. ",
            "Request your unique identifier in our shared communication channel (TG, Slack, etc), if already set up, or reach out to [email¬†protected]. Please do not use any other identifier other than the one provided to you.",
            "See Cross-chain Actions Integration Guide for recommended UI and UX patterns. ",
            "",
            "Last updated 1 month ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "End-user (or intermediate contract) includes a message field in the deposit transaction.\nTo be repaid for the fill, the relayer is required to include the same message field in their fill.\nWhen this message field is non-empty and the recipient is a contract, the \nSpokePool\n calls a special handler function on the recipient handler contract with the message (and a few other fields).\nThis function can do anything, meaning application-specific actions can be executed atomically",
            "Executing Destination Actions\nAppend Unique Identifier to CallData\nUI Guide"
        ],
        "tables": [],
        "code_blocks": [
            {
                "id": "4fOWhaFk9rAN",
                "code": "Function: depositV3(address depositor,address recipient,address inputToken,address outputToken,uint256 inputAmount,uint256 outputAmount,uint256 destinationChainId,address exclusiveRelayer,uint32 quoteTimestamp,uint32 fillDeadline,uint32 exclusivityDeadline,bytes message)\n\n0x7b939232000000000000000000000000c30c7ea910a71ce06ae840868b0c7e47616ba4c9000000000000000000000000c30c7ea910a71ce06ae840868b0c7e47616ba4c9000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000000000009502f9000000000000000000000000000000000000000000000000000000000094fd2f84000000000000000000000000000000000000000000000000000000000000a4b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066799bfb000000000000000000000000000000000000000000000000000000006679f0f40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000001dc0def001"
            }
        ],
        "summaries": []
    },
    "https://docs.across.to/use-cases/embedded-cross-chain-actions/cross-chain-actions-integration-guide/using-the-generic-multicaller-handler-contract": {
        "title": "Using the Generic Multicaller Handler Contract | Across Docs",
        "headers": [
            "Using the Generic Multicaller Handler Contract",
            "Creating a Transaction for an Aave Deposit (Example #1)",
            "Creating a Transaction for WrapChoice (Example #2)",
            "Reverting Transactions",
            "Summarized Requirements",
            "Security & Safety Considerations "
        ],
        "paragraphs": [
            "In this example we'll be walking through how to use this functionality to perform an Aave deposit on behalf of the user on the destination chain, using our audited generic multicall handler. Deployments of the audited multicall handler contract be found here.",
            "To execute a destination action, it is required that you send some nonempty message to the handler contract on the other side. This message allows you to pass arbitrary information to a recipient contract and it ensures that Across understands that you intend to trigger the handler function on the recipient contract (instead of just transferring tokens). A message is required if you want the handler to be called.",
            "In this example, our message will include the user's address, the Aave contract address, and the calldata we want to execute to submit an Aave deposit as the minimum required information that our handler contract would need to know to generate an Aave deposit instruction. Here's an example for generating this in typescript:",
            "Example in solidity:",
            "The deposit creation process is nearly identical to the process described in Bridge Integration Guide. However, there are a few tweaks to that process to include a message.",
            "When getting a quote, two additional query parameters need to be added.",
            "recipient: the recipient for the deposit. In this use case, this is not the end-user. It is the the multicall handler contract. ",
            "message: the message you crafted above. In the above Aave example, the outputAmount needs to be set equal to the depositAmount to ensure that the amount expected to be received on the destination chain by the handler contract is equal to the amount to be deposited into Aave. However, usually the suggested-fees endpoint in the API is queried to get the suggested outputAmount to set in order to make the inputAmount profitable for fillers to relay. We recommend doing the following in cases like this Aave example:",
            "In the message you use as a parameter when querying the suggested-fees endpoint, set depositAmount = outputAmount = inputAmount which will return you a suggested output amount.",
            "When you call depositV3, set outputAmount to the newly suggested output amount, and keep inputAmount equal to depositAmount. This will ensure that your deposit is profitable for fillers.",
            "When calling depositV3, you'll need to make a slight tweak to the parameters.",
            "The recipient should be set to the multicall handler contract",
            "The message field should be set to the message you generated above instead of 0x. Make sure that you re-generate the message setting inputAmount = depositAmount and outputAmount equal to the suggested output amount.",
            "In the Aave example, the inputAmount  should be set equal to the depositAmount  and the outputAmount should be set equal to the suggested-fees' suggested output amount. This suggested output amount will be received on the destination chain by the handler contract and be equal to the amount to be deposited into Aave on behalf of the user.",
            "This contract, as mentioned above, is audited and works as a generic handler where you can submit a list of transactions to be executed on the destination chain after receiving the deposit. This contract's deployed addresses can be found here. All you need to do to get started using this contract to execute a destination action is to set the deployed address on the deposit's destination chain as the recipient address and construct the message appropriately.",
            "The multicall handler implements a handleV3AcrossMessage that expects the message to be an encoded set of Instructions, which contains a list of transactions to execute. In the Aave exmaple, the transactions to execute are (1) approve the Aave pool to transfer tokens from the handler contract and (2) submit a deposit to the Aave pool using the received tokens.  In the example above, the function generateMessageForMulticallHandler can be used to create a message in the correct format.",
            "As you can see above when generating the deposit message and below in building a custom handler contract, the tradeoff of using the multicall handler contract is that the complexity is encountered when crafting the message, which must be a correctly-encoded Instructions object. Once the message is formed correctly, you don't need to write any more code.",
            "Handler contracts only uses the funds that are sent to it. That means that the message is assumed to only have authority over those funds and, critically, no outside funds. This is important because relayers can send invalid relays. They will not be repaid if they attempt this, but if an invalid message could unlock other funds, then a relayer could spoof messages maliciously. ",
            "Now that you have a process for constructing a message, creating a deposit transaction, all you need to do is send the deposit to have the generic multicall handler get executed on the destination.",
            "Here's another contract example using a slightly different message format to allow users to choose whether they want to receive WETH or ETH. In this example, a bool is passed along with the address of the user to allow the message to define the unwrapping behavior on the destination.",
            "Here is an example of generating a message that can be used with an already-deployed Multicall handler contract:",
            "Using the above contract, generate a message by calling generateMessageForMulticallHandler and then use this message when submitting a deposit. Like in the Aave example, the outputAmount and outputToken used to form the message should match the deposit's outputAmount and outputToken.",
            "The deposit recipient should be set to the deployed MulticallHandler address on the destination chain. Generating the Deposit is identical to process described above.",
            "If the message specifies a transaction that could revert when handled on the destination, it is recommended to set a fallbackRecipient ",
            "If a fallbackRecipient is set to some non-zero address and any instruction reverts, the tokens that are received in the fill as outputAmount will be sent to the fallbackRecipient on the destinationChainId",
            "If no fallback is set, and any instructions fail, the fill on destination will fail and cannot occur. In this case the deposit will expire when the destination SpokePool timestamp exceeds the deposit fillDeadline timestamp, the depositor will be refunded on the originChainId.  Ensure that the depositor address on the origin SpokePool is capable of receiving refunds.",
            "The deposit message is not empty. Create the message by encoding instructions correctly that will be executed by the MulticallHandler on the destination chain.",
            "Multicall Handler contract deployments can be found here",
            "Alongside the encoded instructions in the message, set a fallbackRecipient address to one that should receive any leftover tokens regardless of instruction execution success. In most cases, this should be the end user's address",
            "The recipient address is the multicall handler contract on the destinationChainId",
            "Use the Across API to get an estimate of the outputAmount you should set for your message and recipient combination.",
            "Call depositV3() passing in your message and the suggested outputAmount.",
            "Once the relayer calls fillV3Relay() on the destination, the recipient multicall handler contract's handleV3AcrossMessage will be executed",
            "The additional gas cost to execute the above function is compensated for in the difference between the deposit's inputAmount and outputAmount.",
            "Avoid making unvalidated assumptions about the message data supplied to handleV3AcrossMessage(). Across does not guarantee message integrity, only that a relayer who spoofs a message will not be repaid by Across. If integrity is required, integrators should consider including a depositor signature in the message for additional verification. Message data should otherwise be treated as spoofable and untrusted for use beyond directing the funds passed along with it.",
            "Avoid embedding assumptions about the transfer token or transfer amount into their messages. Instead use the tokenSent and amount variables supplied with to the handleV3AcrossMessage() function. These fields are enforced by the SpokePool contract and so can be assumed to be correct by the recipient contract.",
            "The relayer(s) able to complete a fill can be restricted by storing an approved set of addresses in a mapping and validating the handleV3AcrossMessage() relayer parameter. This implies a trust relationship with one or more relayers.",
            "",
            "Last updated 1 month ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "If the \nmessage\n specifies a transaction that could revert when handled on the destination, it is recommended to set a \nfallbackRecipient\n \nIf a \nfallbackRecipient\n is set to some non-zero address and any instruction reverts, the tokens that are received in the fill as \noutputAmount\n will be sent to the \nfallbackRecipient\n on the \ndestinationChainId\nIf no fallback is set, and any instructions fail, the fill on destination will fail and cannot occur. In this case the deposit will expire when the destination SpokePool timestamp exceeds the deposit fillDeadline timestamp, the depositor will be refunded on the \noriginChainId\n.  Ensure that the depositor address on the origin SpokePool is capable of receiving refunds.",
            "If a \nfallbackRecipient\n is set to some non-zero address and any instruction reverts, the tokens that are received in the fill as \noutputAmount\n will be sent to the \nfallbackRecipient\n on the \ndestinationChainId\nIf no fallback is set, and any instructions fail, the fill on destination will fail and cannot occur. In this case the deposit will expire when the destination SpokePool timestamp exceeds the deposit fillDeadline timestamp, the depositor will be refunded on the \noriginChainId\n.  Ensure that the depositor address on the origin SpokePool is capable of receiving refunds.",
            "The deposit \nmessage\n is not empty. Create the \nmessage\n by encoding instructions correctly that will be executed by the \nMulticallHandler\n on the destination chain.\nMulticall Handler contract deployments can be found \nhere\nAlongside the encoded instructions in the \nmessage\n, set a \nfallbackRecipient\n address to one that should receive any leftover tokens regardless of instruction execution success. In most cases, this should be the end user's address\nThe \nrecipient\n address is the multicall handler contract on the \ndestinationChainId\nUse the Across API to get an estimate of the \noutputAmount\n you should set for your message and recipient combination.\nCall \ndepositV3()\n passing in your message and the suggested \noutputAmount\n.\nOnce the relayer calls \nfillV3Relay()\n on the destination, the recipient multicall handler contract's \nhandleV3AcrossMessage\n will be executed\nThe additional gas cost to execute the above function is compensated for in the difference between the deposit's \ninputAmount\n and \noutputAmount\n.",
            "Avoid making unvalidated assumptions about the \nmessage\n data supplied to \nhandleV3AcrossMessage()\n. Across does not guarantee message integrity, only that a relayer who spoofs a message will not be repaid by Across. If integrity is required, integrators should consider including a depositor signature in the message for additional verification. Message data should otherwise be treated as spoofable and untrusted for use beyond directing the funds passed along with it.\nAvoid embedding assumptions about the transfer token or transfer amount into their messages. Instead use the \ntokenSent\n and \namount\n variables supplied with to the \nhandleV3AcrossMessage()\n function. These fields are enforced by the SpokePool contract and so can be assumed to be correct by the recipient contract.\nThe relayer(s) able to complete a fill can be restricted by storing an approved set of addresses in a mapping and validating the \nhandleV3AcrossMessage()\n \nrelayer\n parameter. This implies a trust relationship with one or more relayers.",
            "Creating a Transaction for an Aave Deposit (Example #1)\nCreating a Transaction for WrapChoice (Example #2)\nReverting Transactions\nSummarized Requirements\nSecurity & Safety Considerations"
        ],
        "tables": [],
        "code_blocks": [
            {
                "id": "B8r1K0bDw3KF",
                "code": "// Ethers V6\nimport { ethers } from \"ethers\";\n\nfunction generateMessageForMulticallHandler(\n  userAddress, \n  aaveAddress, \n  depositAmount, \n  depositCurrency, \n  aaveReferralCode\n) {\n  const abiCoder = ethers.AbiCoder.defaultAbiCoder();\n\n  // Define the ABI of the functions\n  const approveFunction = \"function approve(address spender, uint256 value)\";\n  const depositFunction = \"function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode)\";\n\n  // Create Interface instances\n  const erc20Interface = new ethers.Interface([approveFunction]);\n  const aaveInterface = new ethers.Interface([depositFunction]);\n\n  // Encode the function calls with selectors\n  const approveCalldata = erc20Interface.encodeFunctionData(\"approve\", [aaveAddress, depositAmount]);\n  const depositCalldata = aaveInterface.encodeFunctionData(\"deposit\", [depositCurrency, depositAmount, userAddress, aaveReferralCode]);\n\n  // Encode the Instructions object\n  return abiCoder.encode(\n    [\n      \"tuple(\" +\n        \"tuple(\" +\n          \"address target,\" +\n          \"bytes callData,\" +\n          \"uint256 value\" +\n        \")[],\" +\n        \"address fallbackRecipient\" +\n      \")\"\n    ],\n    [\n      [\n        [\n          [depositCurrency, approveCalldata, 0],\n          [aaveAddress, depositCalldata, 0], \n        ],\n        userAddress\n      ]\n    ]\n  );\n}"
            },
            {
                "id": "7X4KFlxn09Kq",
                "code": "import {IERC20} from \"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface AavePool {\n  function deposit(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n}\n\ncontract GenerateMessageHelper {\n  using SafeERC20 for IERC20;\n  \n  struct Call {\n        address target;\n        bytes callData;\n        uint256 value;\n  }\n  struct Instructions {\n        //  Calls that will be attempted.\n        Call[] calls;\n        // Where the tokens go if any part of the call fails.\n        // Leftover tokens are sent here as well if the action succeeds.\n        address fallbackRecipient;\n  }\n  \n  function generateMessageForMulticallHandler(\n    userAddress: address,\n    aavePool: AavePool,\n    depositAmount: uint256,\n    depositCurrency: address,\n    aaveReferralCode: uint16,\n  ) returns (bytes memory) {\n    bytes memory approveCalldata = abi.encodeWithSelector(\n      IERC20.safeIncreaseAllowance.selector, \n      aaveAddress, \n      depositAmount\n    );\n    bytes memory depositCalldata = abi.encodeWithSelector(\n      AavePool.deposit.selector, \n      depositCurrency\n      depositAmount,\n      userAddress,\n      aaveReferralCode\n    );\n    Call[] calls;\n    calls.push(Call({ target: depositCurrency, callData: approveCalldata, value: 0 });\n    calls.push(Call({ target: address(aavePool), callData: depositCalldata, value: 0 });\n    Instructions memory instructions = Instructions({\n      calls: calls,\n      fallbackRecipient: userAddress\n    });\n    return abi.encode(instructions);\n  }\n  \n  function generateMessageForCustomhandler(address userAddress) returns (bytes memory) {\n    return abi.encode(userAddress);\n  }\n}"
            },
            {
                "id": "ikJ0WtSzABP5",
                "code": "import {IERC20} from \"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface WETHInterface {\n  function withdraw(uint wad) external;\n}\n\ncontract GenerateMessageHelper {\n  using SafeERC20 for IERC20;\n  \n  // Optimism WETH contract hardcoded as an example.\n  address public constant WETH = 0x4200000000000000000000000000000000000006;\n  \n  struct Call {\n        address target;\n        bytes callData;\n        uint256 value;\n  }\n  struct Instructions {\n        //  Calls that will be attempted.\n        Call[] calls;\n        // Where the tokens go if any part of the call fails.\n        // Leftover tokens are sent here as well if the action succeeds.\n        address fallbackRecipient;\n  }\n  \n  error NotWETH();\n  \n  function generateMessageForMulticallHandler(\n    userAddress: address,\n    outputToken: address,\n    outputAmount: uint256,\n    sendWeth: bool\n  ) returns (bytes memory) {\n    if (outputToken != weth) revert NotWETH();\n    Call[] calls;\n    if (sendWETH) {\n      // Transfer WETH directly to user address.\n      bytes memory transferCalldata = abi.encodeWithSelector(\n        IERC20.safeTransfer.selector, \n        userAddress, \n        outputAmount\n      );\n      calls.push(Call({ target: outputToken, callData: transferCalldata, value: 0 });\n    } else {\n      // Unwrap WETH and send ETH directly to user address\n      bytes memory withdrawCalldata = abi.encodeWithSelector(\n        WETHInterface.withdraw.selector,\n        outputAmount\n      );\n      calls.push(Call({ target: outputToken, callData: withdrawCalldata, value: 0 });\n      calls.push(Call({ target: userAddress, callData: \"\", value: outputAmount });\n    }\n    Instructions memory instructions = Instructions({\n      calls: calls,\n      fallbackRecipient: userAddress\n    });\n    return abi.encode(instructions);\n  }\n}"
            }
        ],
        "summaries": []
    },
    "https://docs.across.to/use-cases/embedded-cross-chain-actions/cross-chain-actions-integration-guide/using-a-custom-handler-contract": {
        "title": "Using a Custom Handler Contract | Across Docs",
        "headers": [
            "Using a Custom Handler Contract",
            "Creating an Transaction for an Aave Deposit (Example #1)",
            "Creating a Transaction for WrapChoice (Example #2)",
            "Reverting Transactions",
            "Summarized Requirements",
            "Security & Safety Considerations "
        ],
        "paragraphs": [
            "In this example we'll be walking through how to use this functionality to perform an Aave deposit on behalf of the user on the destination chain, using a custom handler contract. ",
            "It is reccommended for most use cases to use the Using the Generic Multicaller Handler Contract, but if your use case requires more complex logic, you'll need to implement a custom handleV3AcrossMessage function and deploy a new contract, but creating the deposit message is trivial. ",
            "Example in solidity:",
            "You will need to implement a function matching the following interface in your handler contract to receive the message:",
            "For this example, we're depositing the funds the user sent into AAVE on the user's behalf. Here's how that full contract implementation might look. ",
            "This contract has not been vetted whatsoever, so use this sample code at your own risk.",
            "The deposit creation process is nearly identical to the process described for initiating a deposit (Bridge Integration Guide). However, there are a few tweaks to that process to include a message.",
            "When getting a quote, two additional query parameters need to be added.",
            "recipient: the recipient for the deposit. In this use case this is not the end-user. It is the contract that implements the handler you would like to call.",
            "message: the message you crafted above. In the above Aave example, the outputAmount needs to be set equal to the amount to ensure that the amount expected to be received on the destination chain by the handler contract is equal to the amount to be deposited into Aave. However, usually the suggested-fees endpoint in the API is queried to get the suggested outputAmount to set in order to make the inputAmount profitable for fillers to relay. We recommend doing the following in cases like this Aave example:",
            "In the message you use as a parameter when querying the suggested-fees endpoint, set depositAmount = outputAmount = inputAmount which will return you a suggested output amount.",
            "When you call depositV3, set outputAmount to the newly suggested output amount, and keep inputAmount equal to depositAmount. This will ensure that your deposit is profitable for fillers.",
            "When calling depositV3, you'll need to make a slight tweak to the parameters.",
            "The recipient should be set to your custom handler contract.",
            "The message field should be set to the message you generated above instead of 0x. Make sure that you re-generate the message setting inputAmount = amount and outputAmount equal to the suggested output amount.",
            "In the above example, the outputAmount needs to be set equal to the amount to ensure that the amount expected to be received on the destination chain by the handler contract is equal to the amount to be deposited into Aave.",
            "You can find this interface definition in the codebase here.",
            "When the relay is filled, the destination SpokePool calls handleV3AcrossMessage on the recipient contract (your custom handler contract) with the message (and a few other fields). You can define any arbitrary logic in handleV3AcrossMessage to fit your use case. ",
            "Handler contracts only uses the funds that are sent to it. That means that the message is assumed to only have authority over those funds and, critically, no outside funds. This is important because relayers can send invalid relays. They will not be repaid if they attempt this, but if an invalid message could unlock other funds, then a relayer could spoof messages maliciously. ",
            "Now that you have a process for constructing a message, creating a deposit transaction, and you have a handler contract deployed on the destination chain, all you need to do is send the deposit to have the handler get executed on the destination.",
            "Here's another contract example using a slightly different message format to allow users to choose whether they want to receive WETH or ETH. This example uses a custom handler contract. In this example, the message should be contain an encoded address and bool value only:",
            "The deposit recipient should be set to your custom handler contract's address on the destination chain. Generating the Deposit is identical to process described above.",
            "If the recipient contract's handleV3AcrossMessage function reverts when message , tokenSent, amount, and relayer are passed to it, then the fill on destination will fail and cannot occur. In this case the deposit will expire when the destination SpokePool timestamp exceeds the deposit fillDeadline timestamp, the depositor will be refunded on the originChainId.  Ensure that the depositor address on the origin SpokePool is capable of receiving refunds.",
            "It is possible to update the message using speedUpDepositV3but it requires the original depositor address to create a signature, which may not be possible if the depositor is not an EOA or a smart contract capable of creating ERC1271 signatures.",
            "If the recipient address is not a contract on the destination chain, then the fillRelay transaction will not attempt to pass calldata to it.",
            "Consider implementing fallback logic in your custom handler contract to transfer funds in the case of a transaction revert based on your use case. ",
            "The deposit message is not empty",
            "The recipient address is your custom handler contract on the destinationChainId",
            "Construct your message ",
            "Use the Across API to get an estimate of the relayerFeePct you should set for your message and recipient combination ",
            "Call depositV3() passing in your message ",
            "Once the relayer calls fillV3Relay() on the destination, the recipient's handler contract's handleV3AcrossMessage will be executed",
            "The additional gas cost to execute the above function is compensated for in the deposit's relayerFeePct",
            "Avoid making unvalidated assumptions about the message data supplied to handleV3AcrossMessage(). Across does not guarantee message integrity, only that a relayer who spoofs a message will not be repaid by Across. If integrity is required, integrators should consider including a depositor signature in the message for additional verification. Message data should otherwise be treated as spoofable and untrusted for use beyond directing the funds passed along with it.",
            "Avoid embedding assumptions about the transfer token or transfer amount into their messages. Instead use the tokenSent and amount variables supplied with to the handleV3AcrossMessage() function. These fields are enforced by the SpokePool contract and so can be assumed to be correct by the recipient contract.",
            "The relayer(s) able to complete a fill can be restricted by storing an approved set of addresses in a mapping and validating the handleV3AcrossMessage() relayer parameter. This implies a trust relationship with one or more relayers.",
            "Last updated 2 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "If the \nrecipient\n contract's \nhandleV3AcrossMessage\n function reverts when \nmessage\n , \ntokenSent\n, \namount\n, and \nrelayer\n are passed to it, then the fill on destination will fail and cannot occur. In this case the deposit will expire when the destination SpokePool timestamp exceeds the deposit fillDeadline timestamp, the depositor will be refunded on the \noriginChainId\n.  Ensure that the depositor address on the origin SpokePool is capable of receiving refunds.\nIt is possible to update the message using \nspeedUpDepositV3\nbut it requires the original \ndepositor\n address to create a signature, which may not be possible if the \ndepositor\n is not an EOA or a smart contract capable of creating ERC1271 signatures.\nIf the \nrecipient\n address is not a contract on the destination chain, then the \nfillRelay\n transaction will not attempt to pass calldata to it.\nConsider implementing fallback logic in your custom handler contract to transfer funds in the case of a transaction revert based on your use case.",
            "The deposit \nmessage\n is not empty\nThe \nrecipient\n address is your custom handler contract on the \ndestinationChainId\nConstruct your \nmessage\n \nUse the Across API to get an estimate of the \nrelayerFeePct\n you should set for your message and recipient combination \nCall \ndepositV3()\n passing in your message \nOnce the relayer calls \nfillV3Relay()\n on the destination, the recipient's handler contract's \nhandleV3AcrossMessage\n will be executed\nThe additional gas cost to execute the above function is compensated for in the deposit's \nrelayerFeePct",
            "Avoid making unvalidated assumptions about the \nmessage\n data supplied to \nhandleV3AcrossMessage()\n. Across does not guarantee message integrity, only that a relayer who spoofs a message will not be repaid by Across. If integrity is required, integrators should consider including a depositor signature in the message for additional verification. Message data should otherwise be treated as spoofable and untrusted for use beyond directing the funds passed along with it.\nAvoid embedding assumptions about the transfer token or transfer amount into their messages. Instead use the \ntokenSent\n and \namount\n variables supplied with to the \nhandleV3AcrossMessage()\n function. These fields are enforced by the SpokePool contract and so can be assumed to be correct by the recipient contract.\nThe relayer(s) able to complete a fill can be restricted by storing an approved set of addresses in a mapping and validating the \nhandleV3AcrossMessage()\n \nrelayer\n parameter. This implies a trust relationship with one or more relayers.",
            "Creating an Transaction for an Aave Deposit (Example #1)\nCreating a Transaction for WrapChoice (Example #2)\nReverting Transactions\nSummarized Requirements\nSecurity & Safety Considerations"
        ],
        "tables": [],
        "code_blocks": [
            {
                "id": "ydHG0JXElqYm",
                "code": "// Ethers V6\nimport ethers from \"ethers\";\n\nfunction generateMessageForCustomHandler(userAddress: string) {\n  const abiCoder = ethers.AbiCoder.defaultAbiCoder();\n  return abiCoder.encode([\"address\"], [userAddress]);\n}"
            },
            {
                "id": "L642MNNZv4Xk",
                "code": "function generateMessageForCustomhandler(address userAddress) returns (bytes memory) {\n  return abi.encode(userAddress);\n}"
            },
            {
                "id": "tyVtyGRyKreT",
                "code": "function handleV3AcrossMessage(\n    address tokenSent,\n    uint256 amount,\n    address relayer,\n    bytes memory message\n) external;"
            },
            {
                "id": "rCN6Zmt20MfW",
                "code": "import {IERC20} from \"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface AavePool {\n  function deposit(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n}\n\ncontract AaveDepositor {\n  using SafeERC20 for IERC20;\n  \n  error Unauthorized();\n\n  address public immutable aavePool;\n  uint16 public immutable referralCode;\n  address public immutable acrossSpokePool;\n  \n  constructor(address _aavePool, uint16 _referralCode, address _acrossSpokePool) {\n    aavePool = _aavePool;\n    referralCode = _referralCode;\n    acrossSpokePool = _acrossSpokePool;\n  }\n  \n  function handleV3AcrossMessage(\n    address tokenSent,\n    uint256 amount,\n    address relayer, // relayer is unused\n    bytes memory message\n  ) external {\n    // Verify that this call came from the Across SpokePool.\n    if (msg.sender != acrossSpokePool) revert Unauthorized();\n  \n    // Decodes the user address from the message.\n    address user = abi.decode(message, (address));\n    \n    // Approve and deposit the funds into AAVE on behalf of the user.\n    IERC20(tokenSent).safeIncreaseAllowance(aavePool, amount);\n    aavePool.deposit(tokenSent, amount, user, referralCode);\n  }\n}"
            },
            {
                "id": "tNI3DVv1C346",
                "code": "function generateMessageForCustomHandler(userAddress: string, sendWeth: boolean) {\n  const abiCoder = ethers.AbiCoder.defaultAbiCoder();\n  return abiCoder.encode([\"address\", \"bool\"], [userAddress, sendWeth]);\n}"
            },
            {
                "id": "4RMOZcYhK3So",
                "code": "import {IERC20} from \"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface WETHInterface {\n  function withdraw(uint wad) external;\n}\n\ncontract WrapChoice {\n    using SafeERC20 for IERC20;\n\n    error Unauthorized();\n    error NotWETH();\n    error FailedETHTransfer()\n\n    address public immutable weth;\n    address public immutable acrossSpokePool;\n    \n    constructor(address _weth, address _acrossSpokePool) {\n      weth = _weth;\n      acrossSpokePool = _acrossSpokePool;\n    }\n    \n    function handleV3AcrossMessage(\n        address tokenSent, \n        uint256 amount, \n        address relayer, // relayer is unused \n        bytes memory message\n    ) external {\n        if (msg.sender != acrossSpokePool) revert Unauthorized();\n        if (tokenSent != weth) revert NotWETH();\n        \n        (address payable user, bool sendWETH) = abi.decode(message, (address, bool));\n        \n        if (sendWETH) {\n          // Transfer WETH directly to user address.\n          IERC20(weth).safeTransfer(user, amount);\n        } else {\n          weth.withdraw(amount);\n          // Transfer the funds to the user via low-level call.\n          (bool success,) = user.call{value: amount}(\"\");\n          if (!success) revert FailedETHTransfer();\n        }\n    }\n    \n    // Required to receive ETH from the WETH contract.\n    receive() external payable {}\n}"
            }
        ],
        "summaries": []
    },
    "https://docs.across.to/use-cases/embedded-cross-chain-actions/cross-chain-actions-ui-guide": {
        "title": "Cross-chain Actions UI Guide | Across Docs",
        "headers": [
            "Cross-chain Actions UI Guide",
            "Best Practices",
            "Example Flow"
        ],
        "paragraphs": [
            "This UI guide is a counterpart to the technical Cross-chain Actions Integration Guide and is intended to offer UI and UX patterns developers can implement directly within their core application CTAs. ",
            "Embed a source chain selector directly within the UI component where users perform an action. ",
            "Default the source chain selector to the balance where the user has the most funds of the input asset. The destination chain is the network where the user is interacting with your protocol. ",
            "Don't require users to go to wallet, switch network, then return to app to perform an action. For example, if the user selects a source chain that is not the network they are currently connected to:",
            "1: user clicks the button to perform the action (\"confirm\")",
            "2: wallet prompts user to switch network to the source chain",
            "3: wallet prompts user to execute the cross-chain action (depositing into Across)",
            "Last updated 2 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Embed a source chain selector directly within the UI component where users perform an action. \nDefault the source chain selector to the balance where the user has the most funds of the input asset. The destination chain is the network where the user is interacting with your protocol. \nDon't require users to go to wallet, switch network, then return to app to perform an action. For example, if the user selects a source chain that is not the network they are currently connected to:\n1: user clicks the button to perform the action (\"confirm\")\n2: wallet prompts user to switch network to the source chain\n3: wallet prompts user to execute the cross-chain action (depositing into Across)",
            "1: user clicks the button to perform the action (\"confirm\")\n2: wallet prompts user to switch network to the source chain\n3: wallet prompts user to execute the cross-chain action (depositing into Across)",
            "Best Practices\nExample Flow"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/use-cases/settle-cross-chain-intents": {
        "title": "Settle Cross-chain Intents | Across Docs",
        "headers": [
            "Settle Cross-chain Intents",
            "Integrating Across Settlement into Your Application",
            "Across Settlement Example"
        ],
        "paragraphs": [
            "The future of interoperability is intents and Across Settlement is the only production-ready, modular settlement layer built to facilitate cross-chain intents. The Across Bridge and Across+ products build on top of Across Settlement to offer bridging to users and bridge abstraction to dApp developers.",
            "With Across Settlement, any other application or source of cross-chain intent order flow can leverage Across Settlement to enable the fastest speeds and lowest fees for their interoperability use-case.",
            "This guide contains an examples for how to build on top of Across Settlement",
            "If you have further questions or suggestions for this guide, please send a message to the #developer-questions channel in the Across Discord.",
            "Across Settlement is a very flexible system, so this example won't capture all that you can do. However, it should illustrate the types of integrations that are possible.",
            "The example application we're going to build has the following architecture:",
            "User asks for a quote on a cross-chain swap from an offchain RFQ system.",
            "Market-maker-relayers bid on the opportunity to fill the user.",
            "The user signs the winning bid as a Permit2 order.",
            "The Permit2 order is passed to the winning market-maker-relayer.",
            "The market-maker-relayer sends a transaction where this order is put onchain.",
            "In that transaction, the user's funds are pulled via Permit2. A bond is submitted by the market-maker-relayer in the transaction as well in the same currency as the user's funds.",
            "An Across deposit is created. The bond + user funds are set as the input amount. The market-maker-relayer is set as the exclusive relayer, so they are the only relayer who can submit the relay on the destination.",
            "This tutorial will not implement the offchain components, but it will show a sample contract implementation for the contract that processes the Permit2 order.",
            "Note: the implementation below has not been vetted, validated, or optimized in any way. It is purely meant as an illustrative example. Use this sample code at your own risk. See the comments in the code to understand what each portion of the code is doing.",
            "As is shown in the example above, Across Settlement can be used as a tool to verify cross-chain intent fulfillment in many different setups. The primary advantage is that the integrating protocol can abstract away the complexity of the verification and fulfillment, so they don't have to deal with the security, timing, and asynchrony challenges of building a cross-chain system.",
            "Across Settlement provides additional advantages over naive cross-chain settlement systems, which ultimately lead to better execution of intent fulfillment for users and relayers:",
            "Aggregated and Optimistic Verification: The Across Settlement system aggregates valid fills events off-chain to create a repayment bundle, which is then optimistically verified by UMA's Optimistic Oracle. This verification and repayment mechanism scales gas cost of repayment at O(1) instead of O(N) with the number of fills. This offers an order of magnitude in gas savings vs. other approaches and ultimately leads to better pricing for users and more profit for relayers.",
            "Relayer Cross-chain Management: With Across‚Äô settlement architecture, repayment is made on the relayer‚Äôs chain of choice, reducing overhead and complexity of managing cross-chain positions. This lowers costs for relayers, enabling better pricing and execution for end-users. It is enabled by Across‚Äô Hub and Spoke model, where passive LPs extend loans to relayers for taking on time-value risk as funds are rebalanced through canonical bridges by the protocol.",
            "Last updated 6 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Integrating Across Settlement into Your Application\nAcross Settlement Example"
        ],
        "tables": [],
        "code_blocks": [
            {
                "id": "z160SI3njonO",
                "code": "import {IPermit2} from \"permit2/src/interfaces/IPermit2.sol\";\nimport {IERC20} from \"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"openzeppelin-contracts/contracts/token/ERC20/utils/SafeTransferFrom.sol\";\n\n// Across SpokePool Interface\ninterface AcrossV3SpokePool {\n  function depositV3(\n    address depositor,\n    address recipient,\n    address inputToken,\n    address outputToken,\n    uint256 inputAmount,\n    uint256 outputAmount,\n    uint256 destinationChainId,\n    address exclusiveRelayer,\n    uint32 quoteTimestamp,\n    uint32 fillDeadline,\n    uint32 exclusivityDeadline,\n    bytes calldata message\n  ) external;\n}\n\n// Sample cross-chain order\nstruct CrossChainOrder {\n  address rfqContract;\n  address swapper;\n  address relayer;\n  address recipient;\n  address inputToken;\n  address outputToken;\n  uint256 inputAmount;\n  uint256 relayerBondAmount;\n  uint256 outputAmount;\n  uint256 destinationChainId;\n  uint256 nonce;\n  uint256 deadline;\n}\n\n// A typestring is required for Permit2 to be able to process the order as witness data.\nstring constant ORDER_WITNESS_TYPESTRING = \"CrossChainOrder witness)CrossChainOrder(address rfqContract,address swapper,address relayer,address recipient,address inputToken,address outputToken,uint256 inputAmount,uint256 relayerBondAmount,uint256 outputAmount,uint256 destinationChainId,uint256 nonce,uint256 deadline)\";\n\ncontract RFQSwapper {\n  using SafeERC20 for IERC20;\n\n  IPermit2 public immutable permit2;\n  AcrossV3SpokePool public immutable spokePool;\n  \n  constructor(address _permit2, address _spokePool) {\n    permit2 = Permit2(_permit2);\n    spokePool = AcrossV3SpokePool(_spokePool);\n  }\n  \n  // The initiate function:\n  // 1. Takes in an order and swapper signature.\n  // 2. Verifies the signature and order validity.\n  // 3. Passes along the tokens and instructions to the Across SpokePool\n  //    where the order will be filled, that fill verified, and then settled.\n  function initiate(CrossChainOrder memory order, bytes calldata signature) {\n    // This code is the basic process for validating and pulling in tokens\n    // for a Permit2-based order.\n    // It's somewhat involved, but it does most of the work in validating the\n    // order and signature.\n    permit2.permitWitnessTransferFrom(\n      // PermitTransferFrom struct init\n      IPermit2.PermitTransferFrom({\n        permitted: IPermit2.TokenPermissions({\n          token: order.inputToken,\n          amount: order.inputAmount\n        }),\n        nonce: order.nonce,\n        deadline: order.deadline\n      }),\n      // SignatureTransferDetails struct init\n      IPermit2.SignatureTransferDetails({\n        to: address(this),\n        requestedAmount: order.inputAmount\n      }),\n      order.swapper,\n      keccak256(abi.encode(order));\n      ORDER_WITNESS_TYPESTRING,\n      signature\n    );\n    \n    // Pull in the bond from the msg.sender.\n    IERC20(order.inputToken).safeTransferFrom(msg.sender, order.relayerBondAmount);\n    \n    // Full input amount for Across's purposes both the user amount\n    // and the bond amount.\n    // In the case that the relay is filled correctly, the relayer\n    // gets the full input amount (including the bond).\n    // In the case that the depositor is refunded, they receive the bond\n    // as compensation for the relayer's failure to fill.\n    uint256 amount = order.inputAmount + order.relayerBondAmount;\n    \n    // Now that all the tokens are in this contract, Across contract needs\n    // to be approved to pull the tokens from here.\n    IERC20(order.inputToken).safeIncreaseAllowance(address(spokePool), amount);\n    \n    // Fill deadline is arbitrarily set to 1 hour after initiation.\n    uint256 fillDeadline = block.timestamp + 3600;\n    \n    // Call deposit to pass the order off to Across Settlement.\n    spokePool.deposit(\n      order.swapper,\n      order.recipient,\n      order.inputToken,\n      order.outputToken,\n      order.inputAmount,\n      order.outputAmount,\n      order.destinationChainId,\n      order.relayer,\n      block.timestamp,\n      fillDeadline, // 1 hour deadline\n      fillDeadline, // Exclusivity for the entire fill period\n      \"\" // No message\n    );\n  }\n}"
            }
        ],
        "summaries": []
    },
    "https://docs.across.to/concepts/what-are-cross-chain-intents": {
        "title": "What are Cross-chain Intents? | Across Docs",
        "headers": [
            "What are Cross-chain Intents?",
            "What are Intents?",
            "ERC 7683"
        ],
        "paragraphs": [
            "An intent is a type of order where a user specifies an outcome instead of an execution path. Intents can be single-chain, or cross-chain where the user's desired outcomes is on a different chain than input assets. Across is only focused on cross-chain intents. ",
            "We see the progression of cross-chain intents in the following way:",
            "Phase 1: Users' intent specifies moving the same asset from Chain A to Chain B",
            "This is what Across started with and has been supporting since 2021. ",
            "Phase 2: Users' intent specifies moving the same asset from Chain A to Chain B and then executing a transaction on Chain B",
            "This is enabled in Across by new functionality to embed instructions on the origin deposit to be executed on the destination. ",
            "Phase 3: Users' intent specifies swapping asset X on Chain A for a minimum amount of asset Y on Chain B and then executing a transaction on Chain B",
            "To grow the adoption of interoperability solutions powered by intents, Across is working on defining a cross-chain intent order standard, based on the concepts outlined in Phase 3 above. This will enable a unified way to ingest, bid on, escrow and settle user intents. See more at erc7683.org. ",
            "Last updated 2 months ago",
            "Across Settlement supports these types of orders now. See .  "
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "This is what Across started with and has been supporting since 2021.",
            "This is enabled in Across by new functionality to \nembed instructions\n on the origin deposit to be executed on the destination.",
            "",
            "What are Intents?\nERC 7683"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/concepts/intents-architecture-in-across": {
        "title": "Intents Architecture in Across | Across Docs",
        "headers": [
            "Intents Architecture in Across",
            "Across' Intents Architecture",
            "Modular Intents Settlement Layer"
        ],
        "paragraphs": [
            "Across' cross-chain intents architecture can be distilled into a 3-layered system: a request for quote mechanism to house users' intents, enabling a competitive network of relayers to bid, claim and fill those orders, and lastly a settlement layer to verify intent fulfillment and repay relayers. ",
            "Below is a diagram of the planned architecture of Across after implementing a RFQ price auction to enable gasless orders and cross-chain swaps:",
            "Users Request Quotes to Fill their Intent",
            "User receives a quote from a relayer to fill their order, and signs (no onchain transaction). ",
            "Across' current RFQ implementation does not include gasless orders or cross-chain swaps via a RFQ as depicted in steps 1, 2a, 2b, though these are planned upgrades. ",
            "Across' quoting currently has fixed fees and relayer competition is strictly based on a speed. ",
            "All other steps are identical to Across' current architecture.",
            "Relayer Network Fills User ",
            "(a) Relayer claims the order and executes the sign order (b) bringing the transaction on-chain and the users' assets are escrowed via into the SpokePool. The structure of Across orders can be found in Intent Lifecycle in Across. ",
            "(a) Relayer calls fillRelayV3 on the destination SpokePool with their own assets which (b) are then transferred to the user. During this step relayers also specify which chain to take repayment on. ",
            "Settlement System Verifies Fills and Repays Relayer",
            "Over a 60 minute window, the Dataworker ingests deposit events, matches them to valid fill events (i.e. fills that meet the intent order requirements). All valid fills are aggregated into a relayer repayment \"bundle\" and optimistically proposed for verification. ",
            "If no disputes occur during the challenge period, the Dataworker executes the bundle on the HubPool which then routes repayment instructions to the various SpokePools to repay relayers. ",
            "Relayers are repaid after a short delay. ",
            "RFQ systems can and will be external to Across, and will have different mechanics than the Across RFQ. ",
            "Across implements a specific type of RFQ for the Across Bridge, but any other auction mechanism that produces a transaction or signed order recognized by the Across SpokePool is supported in Across' Settlement Layer. ",
            "Relayers compete to fill intent order flow and are external to Across. ",
            "Risk Labs (the team building Across) builds and runs an open source implementation of a relayer to support the Across Bridge and other intent systems, and to accelerate the expansion of the relayer network. ",
            "Relayers subscribe to and fill orders from multiple systems, have different service offerings (e.g. same-asset transfers vs. cross-chain swaps) and different profit motives. ",
            "Settlement is the core offering and advantage of Across' architecture. ",
            "Across can accept any cross-chain intent based order flow and provide settlement (escrow, verification and repayment). The order only needs to be able to be translated into a structure SpokePools recognize. Across Settlement provides two core advantages, which ultimately leads to better execution of intent fulfillment for users and relayers:",
            "Aggregated and Optimistic Verification: As described in steps 4-6 in the above diagram, Across Settlement system aggregates valid fills events off-chain to create a repayment bundle, which is then optimistically verified by UMA's Optimistic Oracle. This verification and repayment mechanism scales gas cost of repayment at O(1) instead of O(N) with the number of fills. This offers an order of magnitude in gas savings vs. other approaches and ultimately leads to better pricing for users and more profit for relayers. ",
            "Relayer Cross-chain Management: With Across' settlement architecture, repayment is made on the relayer‚Äôs chain of choice, reducing overhead and complexity of managing cross-chain positions. This lowers costs for relayers enabling better pricing and execution for end-users. It is enabled by Across' Hub and Spoke model, where passive LPs extend loans to relayers for taking on time-value risk as funds are rebalanced through canonical bridges by the protocol. ",
            "Last updated 5 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Across implements a specific type of RFQ for the Across Bridge, but any other auction mechanism that produces a transaction or signed order recognized by the Across SpokePool is supported in Across' Settlement Layer.",
            "Risk Labs (the team building Across) builds and runs an \nopen source implementation of a relayer\n to support the Across Bridge and other intent systems, and to accelerate the expansion of the relayer network. \nRelayers subscribe to and fill orders from multiple systems, have different service offerings (e.g. same-asset transfers vs. cross-chain swaps) and different profit motives.",
            "Aggregated and Optimistic Verification: \nAs described in steps 4-6 in the above diagram, Across Settlement system aggregates valid fills events off-chain to create a repayment bundle, which is then optimistically verified by \nUMA's Optimistic Oracle\n. This verification and repayment mechanism scales gas cost of repayment at O(1) instead of O(N) with the number of fills. This offers an order of magnitude in gas savings vs. other approaches and ultimately leads to better pricing for users and more profit for relayers. \nRelayer Cross-chain Management: \nWith Across' settlement architecture, repayment is made on the relayer‚Äôs chain of choice, reducing overhead and complexity of managing cross-chain positions. This lowers costs for relayers enabling better pricing and execution for end-users. It is enabled by Across' Hub and Spoke model, where passive LPs extend loans to relayers for taking on time-value risk as funds are rebalanced through canonical bridges by the protocol.",
            "Across' Intents Architecture\nModular Intents Settlement Layer"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/concepts/intent-lifecycle-in-across": {
        "title": "Intent Lifecycle in Across | Across Docs",
        "headers": [
            "Intent Lifecycle in Across",
            "Intents as a Building Block",
            "Initiation",
            "Fill",
            "Slow Fill or Expiration (if no fill)",
            "Settlement",
            "Intent Structure in Across"
        ],
        "paragraphs": [
            "Across is used directly by end-users, but it can also be used by other protocols to ensure their user intents are fulfilled. The Across intent structure and lifecycle described below is general enough to serve as a settlement and communication layer for many use cases.",
            "The initiation process involves 3 basic steps:",
            "depositV3 is called on the SpokePool. This call can be made directly by a user, but could also be called on behalf of a user by some other smart contract system. The chain where this call happens is called the origin chain for this intent. The intent specifies the destination chain, which is where the user wants to receive the output.",
            "The user's are pulled into the SpokePool from the caller. These funds are escrowed until the intent is fulfilled, at which point they can be released. Because cross-chain intents are not atomic, user funds must be escrowed before the relayer can safely fulfil the intent.",
            "The SpokePool emits the V3FundsDeposited event. Relayers can subscribe to this event to identify intents that they can fill.",
            "These steps are intended to be a primitive that can fit into almost any system that requires cross-chain transfers. For instance, this design allows for gasless order systems, where the user simply signs the order and the filler brings it on chain. In such a system, the relayer may be preselected in an offchain auction to minimize the user's cost.  ",
            "After initiation, a relayer must fulfil the user's intent. This process involves three distinct actions:",
            "fillV3Relay is called on the SpokePool contract deployed on the destination chain. In this call, the relayer specifies on which chain they would like to receive the user's input tokens. The LP Fee that Across charges on input tokens depends on this choice. Generally, if the relayer takes the input tokens on the chain where the user deposited them, the fee is smallest (if not 0).",
            "The intent is marked as filled in the SpokePool. This prevents a second relayer from filling the same intent a second time.",
            "The SpokePool emits the FilledV3Relay event. These events can be used to track the status of intents being settled by the system. They are also used to track ",
            "Note: intents can have an exclusivity period whereby a particular relayer address has the sole right to perform the fill during that period.",
            "In the (rare) case where a fill doesn't happen, there are two fallbacks: an expiration or a slow fill.",
            "A slow fill means that the Across system fills the user without requiring a relayer to provide the capital. It's called a slow fill because it requires Across to optimistically verify this fill before executing it, which means the fill happens a few hours after initiation (much longer than a typical fill). A slow fill happens when the following conditions are met:",
            "The input token and output token are the same asset.",
            "requestV3SlowFill is called on the destination chain before the expiration time for the intent.",
            "The slow fill is executed before any relayer fills it or the intent expires.",
            "In cases where a slow fill can't or does not happen and a relayer does not fill the intent, the intent expires. Like a slow fill, this expiry must be be optimistically verified, which takes a few hours. Once this verification is done, the user is then refunded their money on the origin chain.",
            "Once an intent has been fulfilled, Across verifies that fulfillment and releases the input tokens to the relayer. Across does this by periodically verifying a bundle of intents. The general process for producing, verifying, and executing a bundle is:",
            "A block range is determined on each chain supported by Across. This block range goes from the end of the previous bundle's range to a recent block chosen by the proposer.",
            "All fill or slow fill request events in the range are validated by ensuring they match some deposit event on the origin chain.",
            "All valid fills, slow fill requests, and intent expirations are combined to determine an aggregated list of payments that need to be made on each chain. Those payments are included in the bundle.",
            "If funds need to be moved between chains to make these payments, those transfer instructions are included in the bundle.",
            "These payments and transfers are organized into a series of data structures called merkle trees whose roots are then proposed on chain to the HubPool along with a bond.",
            "Once this proposal passes the challenge period without being disputed, the bundle execution can begin: these roots are sent from the HubPool to each chain's SpokePool via canonical bridges. Funds are also transferred according to the bundle instructions in this step.",
            "Once these roots arrive, anyone can execute them to make the payments determined in step 3.",
            "An intent in Across is essentially a struct (set of values) that specifies what the user expects to happen. The user's funds are only released once Across verifies that this intent was satisfied as specified.",
            "The basic fields are:",
            "recipient",
            "the address that should receive the funds",
            "inputToken",
            "the token that the user supplies",
            "inputAmount",
            "the amount of the inputToken the user supplies",
            "outputToken",
            "the token that the user wants to receive",
            "outputAmount",
            "the amount of the output token the user wants to receive",
            "destinationChainId",
            "where the user wants to receive the output tokens",
            "fillDeadline",
            "deadline for the user to receive the tokens",
            "message",
            "custom data that is sent to the recipient if it's a contract; this allows for custom actions to be executed on the destination chain",
            "Advanced fields:",
            "exclusiveRelayer",
            "a preselected relayer who is given the exclusive right to fill the user",
            "exclusivityDeadline",
            "deadline for the exclusive relayer to perform the fill before it is opened to other fillers",
            "Last updated 6 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "The input token and output token are the same asset.\nrequestV3SlowFill\n is called on the destination chain before the expiration time for the intent.\nThe slow fill is executed before any relayer fills it or the intent expires.",
            "Intents as a Building Block\nInitiation\nFill\nSlow Fill or Expiration (if no fill)\nSettlement\nIntent Structure in Across"
        ],
        "tables": [
            [
                [
                    "Field",
                    "Description"
                ],
                [
                    "recipient",
                    "the address that should receive the funds"
                ],
                [
                    "inputToken",
                    "the token that the user supplies"
                ],
                [
                    "inputAmount",
                    "the amount of the inputToken the user supplies"
                ],
                [
                    "outputToken",
                    "the token that the user wants to receive"
                ],
                [
                    "outputAmount",
                    "the amount of the output token the user wants to receive"
                ],
                [
                    "destinationChainId",
                    "where the user wants to receive the output tokens"
                ],
                [
                    "fillDeadline",
                    "deadline for the user to receive the tokens"
                ],
                [
                    "message",
                    "custom data that is sent to the recipient if it's a contract; this allows for custom actions to be executed on the destination chain"
                ]
            ],
            [
                [
                    "Field",
                    "Description"
                ],
                [
                    "exclusiveRelayer",
                    "a preselected relayer who is given the exclusive right to fill the user"
                ],
                [
                    "exclusivityDeadline",
                    "deadline for the exclusive relayer to perform the fill before it is opened to other fillers"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/concepts/canonical-asset-maximalism": {
        "title": "Canonical Asset Maximalism | Across Docs",
        "headers": [
            "Canonical Asset Maximalism",
            "Understanding Canonical Assets",
            "How Assets Move between Chains",
            "Canonical Asset Maximalism"
        ],
        "paragraphs": [
            "Canonical assets are the only secure way to represent value across chains. Intent bridges like Across Bridge enable interoperability with canonical assets at faster speeds and lower fees than 3rd party messaging bridges without the security tradeoffs. ",
            "Canonical assets refer to the original or \"native\" form of a token on its home blockchain. In the context of interoperability, tokens can either be \"canonical\" or \"representative.\" The distinction generally comes down to the trust assumptions in securing assets on secondary chains. ",
            "Regardless of chain, interoperability protocol or technology, there is only a singular way to \"move\" a token from its native chain to a secondary chain (and it's not really moving at all): ",
            "locking (or burning) the token on its native chain (the origin)",
            "sending a message from the origin chain to the destination chain after the locking (or burning) is complete",
            "minting a new token on the destination chain",
            "The critical component in the above flow is step #2, and specifically the verification process ensuring the message is not faulty. The verification method used is precisely what distinguishes \"canonical\" vs. \"representative\" assets. At the highest level there are two verification methods:",
            "Via the canonical bridge: Canonical bridge contracts, which already underpin the security of an L2 chain that inherits its security from mainnet Ethereum in the most trust minimized way, is responsible for verifying messages to mint tokens. These are considered \"canonical\" tokens given they do not increase trust assumptions vs. simply using the L2 chain. Similar \"trustless\" verification mechanisms may exist from Ethereum to other Alt L1s. ",
            "Via a 3rd party message bridge:  A 3rd party bridge, which can have any number of trust models, is responsible for verifying messages to mint tokens. These are considered \"representative\" tokens given they do increase trust assumptions, as users now have to trust a 3rd party to never allow a faulty message (and if they do, it could result in an infinite mint and unbacked token on the secondary chain). ",
            "In a trust minimized world, only canonical bridges, and only canonical assets would be used. But the current speed of canonical bridges (1 hour to 7 days) makes them an untenable solution for many applications. 3rd party message bridges can be much faster, but they come with security tradeoffs inherent in minting representative assets. ",
            "Across' intent-based bridge introduces a new architecture in interoperability that doesn't suffer from the security hurdles of 3rd party message bridges, and is empirically faster and cheaper than canonical bridges. Across achieves this by inserting a 3rd party relayer to quickly fulfill users' bridging requests using their own inventory of canonical assets, and a settlement layer that sits on top of canonical bridges to slowly verify and repay relayers. In other words, Across' intent-bridge decouples the urgent need of fast-filling users from the eventual need of verification. Users and developers don't need to make the trust vs. convenience trade-off in canonical vs. representative assets: intent systems like Across offer the best of both worlds. ",
            "",
            "Diagrams inspired by the insightful work from the Connext Network team. ",
            "",
            "Last updated 2 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Understanding Canonical Assets\nHow Assets Move between Chains\nCanonical Asset Maximalism"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/api-reference": {
        "title": "API Reference | Across Docs",
        "headers": [
            "API Reference",
            "Source Code",
            "Caching & Liveness",
            "API Endpoints",
            "Retrieve suggested fee quote for a deposit.",
            "Retrieve current transfer limits of the system",
            "Retrieve available routes for transfers",
            "Track the lifecycle of a deposit"
        ],
        "paragraphs": [
            "The API is designed to be run serverlessly (without storing state) and is a wrapper on top of the SDK. See full implementation here.",
            "Users of the Across API are requested to cache results for no longer than 300 seconds. ",
            "The Across API serves data that is derived from the on-chain state of the Across contracts and relayer bots. The on-chain state is subject to change each block, and cached data can quickly become invalid as a result.",
            "The exception is the /deposit/status endpoint which is implemented in this stateful repository because it relies on an indexing solution.",
            "Returns suggested fees based inputToken+outputToken, originChainId, destinationChainId, and amount. Also includes data used to compute the fees.",
            "Suggested fees for the transaction and supporting data",
            "The quote timestamp that was used to compute the lpFeePct. To pay the quoted LP fee, the user would need to pass this quote timestamp to the protocol when sending their bridge transaction.",
            "Is the input amount below the minimum transfer amount.",
            "The block used associated with this quote, used to compute lpFeePct.",
            "The contract address of the origin SpokePool.",
            "The relayer that is suggested to be set as the exclusive relayer for in the depositV3 call for the fastest fill. Note: when set to \"0x0000000000000000000000000000000000000000\", relayer exclusivity will be disabled. This value is returned in cases where using an exclusive relayer is not recommended.",
            "The suggested exclusivity period (in seconds) the exclusive relayer should be given to fill before other relayers are allowed to take the fill. Note: when set to \"0\", relayer exclusivity will be disabled. This value is returned in cases where using an exclusive relayer is not reccomended.",
            "The expected time (in seconds) for a fill to be made. Represents 75th percentile of the 7-day rolling average of times (updated daily). Times are dynamic by origin/destination token/chain for a given amount.",
            "Returns transfer limits for inputToken+outputToken, originChainId, and destinationChainId.",
            "Transfer limits",
            "The minimum deposit size in the tokens' units. Note: USDC has 6 decimals, so this value would be the number of USDC multiplied by 1e6. For WETH, that would be 1e18.",
            "The maximum deposit size in the tokens' units. Note: The formatting of this number is the same as minDeposit.",
            "The max deposit size that can be relayed \"instantly\" on the destination chain. Instantly means that there is relayer capital readily available and that a relayer is expected to relay within seconds to 5 minutes of the deposit.",
            "The max deposit size that can be relayed with a \"short delay\" on the destination chain. This means that there is relayer capital available on mainnet and that a relayer will immediately begin moving that capital over the canonical bridge to relay the deposit. Depending on the chain, the time for this can vary. Polygon is the worst case where it can take between 20 and 35 minutes for the relayer to receive the funds and relay. Arbitrum is much faster, with a range between 5 and 15 minutes. Note: if the transfer size is greater than this, the estimate should be between 2-4 hours for a slow relay to be processed from the mainnet pool.",
            "The recommended deposit size that can be relayed \"instantly\" on the destination chain. Instantly means that there is relayer capital readily available and that a relayer is expected to relay within seconds to 5 minutes of the deposit. Value is in the smallest unit of the respective token.",
            "Returns available routes based on specified parameters.",
            "List of available routes",
            "Chain ID of the originating chain.",
            "Chain ID of the destination chain.",
            "Origin chain address of token contract to transfer.",
            "Destination chain address of token contract to receive.",
            "The symbol of the origin token to transfer.",
            "The symbol of the destination token to receive.",
            "Returns the fill status of a deposit along with a corresponding fill transaction hash if filled.",
            "This endpoint loads data queried by an indexing service that polls relevant events on a 10-second cadence.\nUsers should therefore expect an average latency of 1 to 15 seconds after submitting a deposit to see the status changed in this endpoint.\nThis delay comes from the time it takes for the internal indexing to include the deposit transaction.",
            "Lifecycle of a transaction",
            "The status of the deposit.",
            "The transaction hash of the fill transaction on the destination chain. This field is only present when fillStatus is filled.",
            "The chain id where the fill transaction will take place.",
            "Last updated 1 month ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "filled: Deposits with this status have been filled on the destination chain and the recipient should have received funds. A FilledV3Relay event was emitted on the destination chain SpokePool.\n\n\npending: Deposit has not been filled yet.\n\n\nexpired: Deposit has expired and will not be filled. Expired deposits will be refunded to the \ndepositor\n on the \noriginChainId\n in the next batch of repayments.",
            "Source Code\nCaching & Liveness\nAPI Endpoints\nGET\nRetrieve suggested fee quote for a deposit.\nGET\nRetrieve current transfer limits of the system\nGET\nRetrieve available routes for transfers\nGET\nTrack the lifecycle of a deposit"
        ],
        "tables": [],
        "code_blocks": [
            {
                "id": ":S7:",
                "code": "curl -L \\\n  'https://app.across.to/api/suggested-fees?inputToken=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2&outputToken=0x4200000000000000000000000000000000000006&originChainId=1&destinationChainId=10&amount=1000000000000000000'"
            },
            {
                "id": ":S8:",
                "code": "{\n  \"totalRelayFee\": {\n    \"pct\": \"376607094864283\",\n    \"total\": \"376607094864283\"\n  },\n  \"relayerCapitalFee\": {\n    \"pct\": \"100200000000000\",\n    \"total\": \"100200000000000\"\n  },\n  \"relayerGasFee\": {\n    \"pct\": \"276407094864283\",\n    \"total\": \"276407094864283\"\n  },\n  \"lpFee\": {\n    \"pct\": \"4552495218411721\",\n    \"total\": \"4552495218411721\"\n  },\n  \"timestamp\": \"1708047000\",\n  \"isAmountTooLow\": false,\n  \"quoteBlock\": \"19237525\",\n  \"spokePoolAddress\": \"0xe35e9842fceaCA96570B734083f4a58e8F7C5f2A\",\n  \"exclusiveRelayer\": \"0x428AB2BA90Eba0a4Be7aF34C9Ac451ab061AC010\",\n  \"exclusivityDeadline\": \"10\",\n  \"expectedFillTimeSec\": \"4\",\n  \"limits\": {\n    \"minDeposit\": 7799819,\n    \"maxDeposit\": 22287428516241,\n    \"maxDepositInstant\": 201958902363,\n    \"maxDepositShortDelay\": 2045367713809,\n    \"recommendedDepositInstant\": 2045367713809\n  }\n}"
            },
            {
                "id": ":S9:",
                "code": "curl -L \\\n  'https://app.across.to/api/limits?inputToken=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2&outputToken=0x4200000000000000000000000000000000000006&originChainId=1&destinationChainId=10'"
            },
            {
                "id": ":Sa:",
                "code": "{\n  \"minDeposit\": 7799819,\n  \"maxDeposit\": 22287428516241,\n  \"maxDepositInstant\": 201958902363,\n  \"maxDepositShortDelay\": 2045367713809,\n  \"recommendedDepositInstant\": 2045367713809\n}"
            },
            {
                "id": ":Sb:",
                "code": "const response = await fetch('https://app.across.to/api/available-routes', {\n    method: 'GET',\n    headers: {},\n});\nconst data = await response.json();"
            },
            {
                "id": ":Se:",
                "code": "[\n  {\n    \"originChainId\": 1,\n    \"destinationChainId\": 10,\n    \"originToken\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    \"destinationToken\": \"0x4200000000000000000000000000000000000006\",\n    \"originTokenSymbol\": \"WETH\",\n    \"destinationTokenSymbol\": \"WETH\"\n  }\n]"
            },
            {
                "id": ":S3:",
                "code": "const response = await fetch('https://app.across.to/api/deposit/status?originChainId=%5Bobject+Object%5D', {\n    method: 'GET',\n    headers: {},\n});\nconst data = await response.json();"
            },
            {
                "id": ":S6:",
                "code": "{\n  \"fillStatus\": \"filled\",\n  \"fillTxHash\": \"text\"\n}"
            }
        ],
        "summaries": []
    },
    "https://docs.across.to/reference/sdk-reference": {
        "title": "SDK Reference | Across Docs",
        "headers": [
            "SDK Reference",
            "About the SDK",
            "How can I use the SDK?",
            "If I want to integrate Across into my dApp, should I use the SDK or the API?",
            "Installation",
            "Basic Usage"
        ],
        "paragraphs": [
            "The Across SDK is written and maintained by the engineering team at Risk Labs.",
            "It is written in typescript and available on NPM at @across-protocol/sdk-v2. It's compatible with both Node JS environments and in the browser.",
            "The SDK can be used currently to query suggested deposit fees and limits, and get liquidity pool statistics. It is imported and used in the API's implementation.",
            "We recommend using the API, which wraps SDK functions and has an easier interface. However, if speed is a concern then we recommend reviewing the API implementation of the SDK to understand best how to use the SDK. ",
            "To add the SDK to your project, use npm or yarn to npm install @across-protocol/sdk-v2 or yarn add @across-protocol/sdk-v2.",
            "This can be used either in a frontend application or a node js project. ",
            "You can read about the different SDK modules on the Github README page. For convenience, the available modules are:",
            "lpFeeCalculator: Get liquidity provider fee that will be charged on deposit for its quoteTimestamp",
            "relayFeeCalculator: Get suggested relayerFeePct for a deposit, which accounts for opportunity cost of capital and gas costs. If the depositor opts to set this fee lower than the suggested fee, then there is a chance that the deposit goes unfilled for a long time.",
            "pool: Get HubPool statistics, such as available liquidReserves that be used to refund relayers and estimatedApy for liquidity providers.",
            "Last updated 2 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "lpFeeCalculator: Get \nliquidity provider fee\n that will be charged on deposit for its \nquoteTimestamp\nrelayFeeCalculator: Get suggested \nrelayerFeePct\n for a deposit, which accounts for \nopportunity cost of capital and gas costs\n. If the depositor opts to set this fee lower than the suggested fee, then there is a chance that the deposit goes unfilled for a long time.\npool: Get HubPool statistics, such as available \nliquidReserves\n that be used to refund relayers and \nestimatedApy\n for \nliquidity providers\n.",
            "About the SDK\nHow can I use the SDK?\nIf I want to integrate Across into my dApp, should I use the SDK or the API?\nInstallation\nBasic Usage"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/contract-addresses": {
        "title": "Contracts | Across Docs",
        "headers": [
            "Contracts"
        ],
        "paragraphs": [
            "Please refer to the Across Contracts repository for further documentation. Most integrations will require interfacing with the SpokePool interface here. ",
            "You can find the contract addresses on the following pages:",
            "Arbitrum",
            "Base",
            "Blast",
            "Ethereum Mainnet",
            "Linea",
            "Lisk",
            "Mode",
            "Optimism",
            "Polygon",
            "Redstone",
            "Scroll",
            "World Chain",
            "zkSync",
            "Zora",
            "These addresses can also be found on the Across GitHub. See Sepolia Testnet for testnet deployment information.",
            "Last updated 22 hours ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Arbitrum\nBase\nBlast\nEthereum Mainnet\nLinea\nLisk\nMode\nOptimism\nPolygon\nRedstone\nScroll\nWorld Chain\nzkSync\nZora"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/contract-addresses/arbitrum-chain-id-42161": {
        "title": "Arbitrum (Chain ID: 42161) | Across Docs",
        "headers": [
            "Arbitrum (Chain ID: 42161)"
        ],
        "paragraphs": [
            "",
            "Arbitrum_SpokePool",
            "0xe35e9842fceaca96570b734083f4a58e8f7c5f2a",
            "Across Governance Token",
            "0x53691596d1BCe8CEa565b84d4915e69e03d9C99d",
            "MulticallHandler",
            "0x924a9f036260DdD5808007E1AA95f08eD08aA569",
            "Last updated 3 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [
            [
                [
                    "Contract Name",
                    "Address"
                ],
                [
                    "Arbitrum_SpokePool",
                    "0xe35e9842fceaca96570b734083f4a58e8f7c5f2a"
                ],
                [
                    "Across Governance Token",
                    "0x53691596d1BCe8CEa565b84d4915e69e03d9C99d"
                ],
                [
                    "MulticallHandler",
                    "0x924a9f036260DdD5808007E1AA95f08eD08aA569"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/contract-addresses/base-chain-id-8453": {
        "title": "Base (Chain ID: 8453) | Across Docs",
        "headers": [
            "Base (Chain ID: 8453)"
        ],
        "paragraphs": [
            "",
            "Base_SpokePool",
            "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64",
            "MulticallHandler",
            "0x924a9f036260DdD5808007E1AA95f08eD08aA569",
            "",
            "Last updated 3 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [
            [
                [
                    "Contract Name",
                    "Address"
                ],
                [
                    "Base_SpokePool",
                    "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64"
                ],
                [
                    "MulticallHandler",
                    "0x924a9f036260DdD5808007E1AA95f08eD08aA569"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/contract-addresses/blast-chain-id-81457": {
        "title": "Blast (Chain ID: 81457) | Across Docs",
        "headers": [
            "Blast (Chain ID: 81457)"
        ],
        "paragraphs": [
            "Blast_SpokePool",
            "0x2D509190Ed0172ba588407D4c2df918F955Cc6E1",
            "MulticallHandler",
            "0x924a9f036260DdD5808007E1AA95f08eD08aA569",
            "Last updated 3 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [
            [
                [
                    "Contract Name",
                    "Address"
                ],
                [
                    "Blast_SpokePool",
                    "0x2D509190Ed0172ba588407D4c2df918F955Cc6E1"
                ],
                [
                    "MulticallHandler",
                    "0x924a9f036260DdD5808007E1AA95f08eD08aA569"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/contract-addresses/mainnet-chain-id-1": {
        "title": "Ethereum Mainnet (Chain ID: 1) | Across Docs",
        "headers": [
            "Ethereum Mainnet (Chain ID: 1)"
        ],
        "paragraphs": [
            "",
            "LPTokenFactory",
            "0x7dB69eb9F52eD773E9b03f5068A1ea0275b2fD9d",
            "HubPool",
            "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
            "Optimism_Adapter",
            "0xAd1b0a86c98703fd5F4E56fff04F6b2D9b9f246F",
            "Boba_Adapter",
            "0x33B0Ec794c15D6Cc705818E70d4CaCe7bCfB5Af3",
            "Arbitrum_Adapter",
            "0x29528780E29abb8Af95a5e5a125b94766987543F",
            "Ethereum_Adapter",
            "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084",
            "Ethereum_SpokePool",
            "0x5c7BCd6E7De5423a257D81B442095A1a6ced35C5",
            "PolygonTokenBridger",
            "0x0330E9b4D0325cCfF515E81DFbc7754F2a02ac57",
            "Polygon_Adapter",
            "0x3E94e8d4316a1eBfb2245E45E6F0B8724094CE1A",
            "zkSync Adapter",
            "0xE233009838CB898b50e0012a6E783FC9FeE447FB",
            "Base Adapter",
            "0x2d8B1e2B0Dff62DF132d23BEa68a6D2c4D20046E",
            "Linea Adapter",
            "0x7Ea0D1882D610095A45E512B0113f79cA98a8EfE",
            "Mode Adapter",
            "0xf1B59868697f3925b72889ede818B9E7ba0316d0",
            "AcrossConfigStore",
            "0x3B03509645713718B78951126E0A6de6f10043f5",
            "AcceleratingDistributor",
            "0x9040e41eF5E8b281535a96D9a48aCb8cfaBD9a48",
            "AcrossMerkleDistributor",
            "0xE50b2cEAC4f60E840Ae513924033E753e2366487",
            "ClaimAndStake",
            "0x985e8A89Dd6Af8896Ef075c8dd93512433dc5829",
            "Across Governance Token",
            "0x44108f0223A3C3028F5Fe7AEC7f9bb2E66beF82F",
            "Across Bond Token",
            "0xee1DC6BCF1Ee967a350e9aC6CaaAA236109002ea",
            "MulticallHandler",
            "0x924a9f036260DdD5808007E1AA95f08eD08aA569",
            "",
            "Last updated 3 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [
            [
                [
                    "Contract Name",
                    "Address"
                ],
                [
                    "LPTokenFactory",
                    "0x7dB69eb9F52eD773E9b03f5068A1ea0275b2fD9d"
                ],
                [
                    "HubPool",
                    "0xc186fA914353c44b2E33eBE05f21846F1048bEda"
                ],
                [
                    "Optimism_Adapter",
                    "0xAd1b0a86c98703fd5F4E56fff04F6b2D9b9f246F"
                ],
                [
                    "Boba_Adapter",
                    "0x33B0Ec794c15D6Cc705818E70d4CaCe7bCfB5Af3"
                ],
                [
                    "Arbitrum_Adapter",
                    "0x29528780E29abb8Af95a5e5a125b94766987543F"
                ],
                [
                    "Ethereum_Adapter",
                    "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084"
                ],
                [
                    "Ethereum_SpokePool",
                    "0x5c7BCd6E7De5423a257D81B442095A1a6ced35C5"
                ],
                [
                    "PolygonTokenBridger",
                    "0x0330E9b4D0325cCfF515E81DFbc7754F2a02ac57"
                ],
                [
                    "Polygon_Adapter",
                    "0x3E94e8d4316a1eBfb2245E45E6F0B8724094CE1A"
                ],
                [
                    "zkSync Adapter",
                    "0xE233009838CB898b50e0012a6E783FC9FeE447FB"
                ],
                [
                    "Base Adapter",
                    "0x2d8B1e2B0Dff62DF132d23BEa68a6D2c4D20046E"
                ],
                [
                    "Linea Adapter",
                    "0x7Ea0D1882D610095A45E512B0113f79cA98a8EfE"
                ],
                [
                    "Mode Adapter",
                    "0xf1B59868697f3925b72889ede818B9E7ba0316d0"
                ],
                [
                    "AcrossConfigStore",
                    "0x3B03509645713718B78951126E0A6de6f10043f5"
                ],
                [
                    "AcceleratingDistributor",
                    "0x9040e41eF5E8b281535a96D9a48aCb8cfaBD9a48"
                ],
                [
                    "AcrossMerkleDistributor",
                    "0xE50b2cEAC4f60E840Ae513924033E753e2366487"
                ],
                [
                    "ClaimAndStake",
                    "0x985e8A89Dd6Af8896Ef075c8dd93512433dc5829"
                ],
                [
                    "Across Governance Token",
                    "0x44108f0223A3C3028F5Fe7AEC7f9bb2E66beF82F"
                ],
                [
                    "Across Bond Token",
                    "0xee1DC6BCF1Ee967a350e9aC6CaaAA236109002ea"
                ],
                [
                    "MulticallHandler",
                    "0x924a9f036260DdD5808007E1AA95f08eD08aA569"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/contract-addresses/linea-chain-id-59144": {
        "title": "Linea (Chain ID: 59144) | Across Docs",
        "headers": [
            "Linea (Chain ID: 59144)"
        ],
        "paragraphs": [
            "",
            "Linea_SpokePool",
            "0x7E63A5f1a8F0B4d0934B2f2327DAED3F6bb2ee75",
            "MulticallHandler",
            "0x1015c58894961F4F7Dd7D68ba033e28Ed3ee1cDB",
            "Last updated 4 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [
            [
                [
                    "Contract Name",
                    "Address"
                ],
                [
                    "Linea_SpokePool",
                    "0x7E63A5f1a8F0B4d0934B2f2327DAED3F6bb2ee75"
                ],
                [
                    "MulticallHandler",
                    "0x1015c58894961F4F7Dd7D68ba033e28Ed3ee1cDB"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/contract-addresses/lisk-chain-id-1135": {
        "title": "Lisk (Chain ID: 1135) | Across Docs",
        "headers": [
            "Lisk (Chain ID: 1135)"
        ],
        "paragraphs": [
            "Lisk_SpokePool",
            "0x9552a0a6624A23B848060AE5901659CDDa1f83f8",
            "MulticallHandler",
            "0x924a9f036260DdD5808007E1AA95f08eD08aA569",
            "",
            "Last updated 2 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [
            [
                [
                    "Contract Name",
                    "Address"
                ],
                [
                    "Lisk_SpokePool",
                    "0x9552a0a6624A23B848060AE5901659CDDa1f83f8"
                ],
                [
                    "MulticallHandler",
                    "0x924a9f036260DdD5808007E1AA95f08eD08aA569"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/contract-addresses/mode-chain-id-34443": {
        "title": "Mode (Chain ID: 34443) | Across Docs",
        "headers": [
            "Mode (Chain ID: 34443)"
        ],
        "paragraphs": [
            "",
            "Mode_SpokePool",
            "0x3baD7AD0728f9917d1Bf08af5782dCbD516cDd96",
            "MulticallHandler",
            "0x924a9f036260DdD5808007E1AA95f08eD08aA569",
            "",
            "Last updated 3 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [
            [
                [
                    "Contract Name",
                    "Address"
                ],
                [
                    "Mode_SpokePool",
                    "0x3baD7AD0728f9917d1Bf08af5782dCbD516cDd96"
                ],
                [
                    "MulticallHandler",
                    "0x924a9f036260DdD5808007E1AA95f08eD08aA569"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/contract-addresses/optimism-chain-id-10": {
        "title": "Optimism (Chain ID: 10) | Across Docs",
        "headers": [
            "Optimism (Chain ID: 10)"
        ],
        "paragraphs": [
            "",
            "Optimism_SpokePool",
            "0x6f26Bf09B1C792e3228e5467807a900A503c0281",
            "Across Governance Token",
            "0xFf733b2A3557a7ed6697007ab5D11B79FdD1b76B",
            "MulticallHandler",
            "0x924a9f036260DdD5808007E1AA95f08eD08aA569",
            "Last updated 3 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [
            [
                [
                    "Contract Name",
                    "Address"
                ],
                [
                    "Optimism_SpokePool",
                    "0x6f26Bf09B1C792e3228e5467807a900A503c0281"
                ],
                [
                    "Across Governance Token",
                    "0xFf733b2A3557a7ed6697007ab5D11B79FdD1b76B"
                ],
                [
                    "MulticallHandler",
                    "0x924a9f036260DdD5808007E1AA95f08eD08aA569"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/contract-addresses/polygon-chain-id-137": {
        "title": "Polygon (Chain ID: 137) | Across Docs",
        "headers": [
            "Polygon (Chain ID: 137)"
        ],
        "paragraphs": [
            "",
            "PolygonTokenBridger",
            "0x0330E9b4D0325cCfF515E81DFbc7754F2a02ac57",
            "Polygon_SpokePool",
            "0x9295ee1d8C5b022Be115A2AD3c30C72E34e7F096",
            "Across Governance Token",
            "0xF328b73B6c685831F238c30a23Fc19140CB4D8FC",
            "MulticallHandler",
            "0x924a9f036260DdD5808007E1AA95f08eD08aA569",
            "Last updated 3 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [
            [
                [
                    "Contract Name",
                    "Address"
                ],
                [
                    "PolygonTokenBridger",
                    "0x0330E9b4D0325cCfF515E81DFbc7754F2a02ac57"
                ],
                [
                    "Polygon_SpokePool",
                    "0x9295ee1d8C5b022Be115A2AD3c30C72E34e7F096"
                ],
                [
                    "Across Governance Token",
                    "0xF328b73B6c685831F238c30a23Fc19140CB4D8FC"
                ],
                [
                    "MulticallHandler",
                    "0x924a9f036260DdD5808007E1AA95f08eD08aA569"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/contract-addresses/redstone-chain-id-690": {
        "title": "Redstone (Chain ID: 690) | Across Docs",
        "headers": [
            "Redstone (Chain ID: 690)"
        ],
        "paragraphs": [
            "",
            "Redstone_SpokePool",
            "0x13fDac9F9b4777705db45291bbFF3c972c6d1d97",
            "MulticallHandler",
            "0x924a9f036260DdD5808007E1AA95f08eD08aA569",
            "Last updated 2 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [
            [
                [
                    "Contract Name",
                    "Address"
                ],
                [
                    "Redstone_SpokePool",
                    "0x13fDac9F9b4777705db45291bbFF3c972c6d1d97"
                ],
                [
                    "MulticallHandler",
                    "0x924a9f036260DdD5808007E1AA95f08eD08aA569"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/contract-addresses/scroll-chain-id-534352": {
        "title": "Scroll (Chain ID: 534352) | Across Docs",
        "headers": [
            "Scroll (Chain ID: 534352)"
        ],
        "paragraphs": [
            "",
            "Scroll_SpokePool",
            "0x3bad7ad0728f9917d1bf08af5782dcbd516cdd96",
            "MulticallHandler",
            "0x924a9f036260DdD5808007E1AA95f08eD08aA569",
            "Last updated 1 month ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [
            [
                [
                    "Contract Name",
                    "Address"
                ],
                [
                    "Scroll_SpokePool",
                    "0x3bad7ad0728f9917d1bf08af5782dcbd516cdd96"
                ],
                [
                    "MulticallHandler",
                    "0x924a9f036260DdD5808007E1AA95f08eD08aA569"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/contract-addresses/scroll-chain-id-534352-1": {
        "title": "World Chain (Chain ID: 480) | Across Docs",
        "headers": [
            "World Chain (Chain ID: 480)"
        ],
        "paragraphs": [
            "",
            "WorldChain_SpokePool",
            "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64",
            "MulticallHandler",
            "0x924a9f036260DdD5808007E1AA95f08eD08aA569",
            "",
            "Last updated 22 hours ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [
            [
                [
                    "Contract Name",
                    "Address"
                ],
                [
                    "WorldChain_SpokePool",
                    "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64"
                ],
                [
                    "MulticallHandler",
                    "0x924a9f036260DdD5808007E1AA95f08eD08aA569"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/contract-addresses/zksync-chain-id-324": {
        "title": "zkSync (Chain ID: 324) | Across Docs",
        "headers": [
            "zkSync (Chain ID: 324)"
        ],
        "paragraphs": [
            "",
            "zkSync_SpokePool",
            "0xE0B015E54d54fc84a6cB9B666099c46adE9335FF",
            "MulticallHandler",
            "0x863859ef502F0Ee9676626ED5B418037252eFeb2",
            "Last updated 4 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [
            [
                [
                    "Contract Name",
                    "Address"
                ],
                [
                    "zkSync_SpokePool",
                    "0xE0B015E54d54fc84a6cB9B666099c46adE9335FF"
                ],
                [
                    "MulticallHandler",
                    "0x863859ef502F0Ee9676626ED5B418037252eFeb2"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/contract-addresses/zora-chain-id-7777777": {
        "title": "Zora (Chain ID: 7777777) | Across Docs",
        "headers": [
            "Zora (Chain ID: 7777777)"
        ],
        "paragraphs": [
            "",
            "Zora_SpokePool",
            "0x13fDac9F9b4777705db45291bbFF3c972c6d1d97",
            "MulticallHandler",
            "0x924a9f036260DdD5808007E1AA95f08eD08aA569",
            "Last updated 2 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [
            [
                [
                    "Contract Name",
                    "Address"
                ],
                [
                    "Zora_SpokePool",
                    "0x13fDac9F9b4777705db45291bbFF3c972c6d1d97"
                ],
                [
                    "MulticallHandler",
                    "0x924a9f036260DdD5808007E1AA95f08eD08aA569"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/contract-addresses/sepolia-testnet": {
        "title": "Sepolia Testnet | Across Docs",
        "headers": [
            "Sepolia Testnet"
        ],
        "paragraphs": [
            "The following Sepolia testnet deployments are supported. Deployment address are maintained here.",
            "For supported tokens/routes, see the Across testnet available-routes API endpoint.",
            "Arbitrum",
            "421614",
            "Base",
            "84532",
            "Blast",
            "168587773",
            "Ethereum",
            "11155111",
            "Lisk",
            "4202",
            "Mode",
            "919",
            "Optimism",
            "11155420",
            "Polygon (Amoy)",
            "80002",
            "Last updated 2 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [
            [
                [
                    "Name",
                    "Chain ID"
                ],
                [
                    "Arbitrum",
                    "421614"
                ],
                [
                    "Base",
                    "84532"
                ],
                [
                    "Blast",
                    "168587773"
                ],
                [
                    "Ethereum",
                    "11155111"
                ],
                [
                    "Lisk",
                    "4202"
                ],
                [
                    "Mode",
                    "919"
                ],
                [
                    "Optimism",
                    "11155420"
                ],
                [
                    "Polygon (Amoy)",
                    "80002"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/selected-contract-functions": {
        "title": "Selected Contract Functions | Across Docs",
        "headers": [
            "Selected Contract Functions",
            "SpokePool state-modifying functions"
        ],
        "paragraphs": [
            "Detailed contract interfaces for depositors.",
            "The spoke pool contract is where deposits are originated and fulfilled and is deployed on all chains that Across supports.",
            "Using deposit will not allow the caller to specify a different outputToken than inputToken. This means that following the CCTP upgrade, deposit callers will not be able to set inputToken = USDC and outputToken = Bridged USDC.",
            "This function is backwards compatible with the existing function with the same name. The main difference in how to use this function is that  the relayerFeePct should now be set equal to the LP fee + relayer fee. ",
            "This is because the concept of the realizedLpFeePct is no longer brought on-chain by the relayer who used to call fillRelay() to fill this deposit. deposit() now emits a V3FundsDeposited event which can only be filled by fillV3Relay() and these fills get charged the LP fee at refund time. Therefore, the caller of deposit()  is responsible for setting the relayerFeePct high enough that it covers both the relayer fees and the LP fees when converted into an outputAmount.",
            "See Tracking Events to understand more how the new events are emitted by deposit().",
            "This triggers a deposit request of tokens to another chain with the following parameters. The originChainId is automatically set to the chain ID on which the SpokePool is deployed. For example, sending a deposit from the Optimism_SpokePool will set its originChainId equal to 10. ",
            "Note on sending ETH: deposit is a payable function meaning it is possible to send native ETH instead of wrapped ETH (i.e. WETH). If you choose to send ETH, you must set msg.value equal to amount. ",
            "Note on receiving ETH: EOA recipients will always receive ETH while contracts will always receive WETH, regardless of whether ETH or WETH is deposited.",
            "Note on setting inputToken and outputToken: the list of currently supported tokens is available on our API, which you can test in-browser here. These values generally must be set equal to ERC20 addresses on the origin and destination chain respectively, so in the case of bridging ETH this should be set to a WETH address.",
            "Note on approvals: the caller must approve the SpokePool to transfer amount of tokens.",
            "Note on inputAmount limits: If the inputAmount is set too high, it can take a while for the deposit to be filled depending on available relayer liquidity. If the outputAmount is set too high, it can be unprofitable to relay. Query the suggested max and min limits here. The contracts will not revert if the outputAmount is set outside of the recommended range, so it is highly recommended to set outputAmount within the suggested limits to avoid locking up funds for an unexpected length of time.  The recommended outputAmount will be equal to inputAmount * ( 1 - relayerFeePct - lpFeePct).",
            "If you are using the API to set the outputAmount then you should set it equal to inputAmount * (1 - fees.totalRelayFee.pct) where fees.totalRelayFee is returned by the /suggested-fees endpoint.",
            "Note on setting quoteTimestamp:",
            "Call the read-only function getCurrentTime() to get the current UNIX timestamp on the origin chain. e.g. this could return: 1665418548.",
            "Call the read-only function depositQuoteTimeBuffer() to get the buffer around the current time that the quoteTimestamp must be set to. e.g. this could return: 600.",
            "quoteTimestamp must be <= currentTime + buffer and >= currentTime - buffer.",
            "Type",
            "Name",
            "Explanation",
            "address",
            "depositor",
            "The account credited with the deposit, but not necessarily the one who has to send inputTokens to the contract if the msg.sender differs from this address.",
            "address",
            "recipient",
            "The account receiving funds on the destination chain. Can be an EOA or a contract. If the output token is the wrapped native token for the chain, then the recipient will receive native token if an EOA or wrapped native token if a contract.",
            "address",
            "inputToken",
            "The token pulled from the caller's account and locked into this contract to initiate the deposit. If this is equal to the wrapped native token then the caller can optionally pass in native token as * msg.value, as long as msg.value = inputTokenAmount.",
            "address",
            "outputToken",
            "The token that the relayer will send to the recipient on the destination chain. Must be an ERC20. Note, this can be set to the zero address (0x0) in which case, fillers will replace this with the destination chain equivalent of the input token.",
            "uint256",
            "inputAmount",
            "The amount of input tokens to pull from the caller's account and lock into this contract. This amount will be sent to the relayer on their repayment chain of choice as a refund following an optimistic challenge window in the HubPool, less a system fee.",
            "uint256",
            "outputAmount",
            "The amount of output tokens that the relayer will send to the recipient on the destination.",
            "uint256",
            "destinationChainId",
            "The destination chain identifier. Must be enabled along with the input token as a valid deposit route from this spoke pool or this transaction will revert.",
            "address",
            "exclusiveRelayer",
            "The relayer that will be exclusively allowed to fill this deposit before the exclusivity deadline timestamp. This must be a valid, non-zero address if the exclusivity deadline is greater than the current block.timestamp. If the exclusivity deadline is < currentTime, then this must be address(0), and vice versa if this is address(0).",
            "uint32",
            "quoteTimestamp",
            "Timestamp of deposit. Used by relayers to compute the LP fee % for the deposit. Must be withindepositQuoteTimeBuffer() of the current time.",
            "uint32",
            "fillDeadline",
            "The deadline for the relayer to fill the deposit. After this destination chain timestamp, the fill will revert on the destination chain. Must be set between [currentTime, currentTime + fillDeadlineBuffer] where currentTime is block.timestamp on this chain or this transaction will revert.",
            "uint32",
            "exclusivityDeadline",
            "The deadline for the exclusive relayer to fill the deposit. After this destination chain timestamp, anyone can fill this deposit on the destination chain. If exclusiveRelayer is set to address(0), then this also must be set to 0, (and vice versa), otherwise this must be set >= current time.",
            "bytes",
            "message",
            "Data that can be passed to the recipient if it is a contract. If no message is to be sent, set this field to an empty bytes array: \"\"(i.e. bytes` of length 0, or the \"empty string\"). See Composable Bridging for examples on how messaging can be used.",
            "Some of a pending deposit's parameters can be modified by calling this function. If a deposit has been completed already, this function will not revert but it won't be able to be filled anymore with the updated params. ",
            "It is the responsibility of the depositor to verify that the deposit has not been fully filled before calling this function.A depositor can request modifications by signing a hash containing the updated details and information uniquely identifying the deposit to relay. This information ensures that this signature cannot be re-used for other deposits.We use the EIP-712 standard for hashing and signing typed data. Specifically, we use the version of the encoding known as \"v4\", as implemented by the JSON RPC method eth_signedTypedDataV4 in MetaMask.You can see how the message to be signed is reconstructed in Solidity here. ",
            "Successfully calling this function will emit an event RequestedSpeedUpV3Deposit which can be used by relayers to fill the original deposit with the new parameters. ",
            "Depositors should assume that the parameters emitted with the lowest updatedOutputAmount will be used, since they are incentivized to use the highest fee possible. (Recall that the relayer's fee is derived by the difference between the inputAmount and the outputAmount). Any relayer can use updated deposit parameters by calling fillV3RelayWithUpdatedDeposit instead of fillV3Relay.",
            "Type",
            "Name",
            "Description",
            "address",
            "depositor",
            "Sender of deposit to be sped up. Does not need to equal msg.sender",
            "uint32",
            "depositId",
            "UUID of deposit to be sped up",
            "uint256",
            "updatedOutputAmount",
            "New output amount that depositor requests to receive. Should be lower than outputAmount to be taken seriously by fillers",
            "address",
            "updatedRecipient",
            "New recipient of deposit.",
            "bytes",
            "updatedMessage",
            "Updated data that is sent to updatedRecipient. As described in section above, this should be set to 0x for the forseeable future.",
            "bytes",
            "depositorSignature",
            "Signed message containing contents here‚Äã",
            "Last updated 1 month ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [
            [
                [
                    "Type",
                    "Name",
                    "Explanation"
                ],
                [
                    "address",
                    "depositor",
                    "The account credited with the deposit, but not necessarily the one who has to send inputTokens to the contract if the msg.sender differs from this address."
                ],
                [
                    "address",
                    "recipient",
                    "The account receiving funds on the destination chain. Can be an EOA or a contract. If the output token is the wrapped native token for the chain, then the recipient will receive native token if an EOA or wrapped native token if a contract."
                ],
                [
                    "address",
                    "inputToken",
                    "The token pulled from the caller's account and locked into this contract to initiate the deposit. If this is equal to the wrapped native token then the caller can optionally pass in native token as * msg.value, as long as msg.value = inputTokenAmount."
                ],
                [
                    "address",
                    "outputToken",
                    "The token that the relayer will send to the recipient on the destination chain. Must be an ERC20. Note, this can be set to the zero address (0x0) in which case, fillers will replace this with the destination chain equivalent of the input token."
                ],
                [
                    "uint256",
                    "inputAmount",
                    "The amount of input tokens to pull from the caller's account and lock into this contract. This amount will be sent to the relayer on their repayment chain of choice as a refund following an optimistic challenge window in the HubPool, less a system fee."
                ],
                [
                    "uint256",
                    "outputAmount",
                    "The amount of output tokens that the relayer will send to the recipient on the destination."
                ],
                [
                    "uint256",
                    "destinationChainId",
                    "The destination chain identifier. Must be enabled along with the input token as a valid deposit route from this spoke pool or this transaction will revert."
                ],
                [
                    "address",
                    "exclusiveRelayer",
                    "The relayer that will be exclusively allowed to fill this deposit before the exclusivity deadline timestamp. This must be a valid, non-zero address if the exclusivity deadline is greater than the current block.timestamp. If the exclusivity deadline is < currentTime, then this must be address(0), and vice versa if this is address(0)."
                ],
                [
                    "uint32",
                    "quoteTimestamp",
                    "Timestamp of deposit. Used by relayers to compute the LP fee % for the deposit. Must be withindepositQuoteTimeBuffer() of the current time."
                ],
                [
                    "uint32",
                    "fillDeadline",
                    "The deadline for the relayer to fill the deposit. After this destination chain timestamp, the fill will revert on the destination chain. Must be set between [currentTime, currentTime + fillDeadlineBuffer] where currentTime is block.timestamp on this chain or this transaction will revert."
                ],
                [
                    "uint32",
                    "exclusivityDeadline",
                    "The deadline for the exclusive relayer to fill the deposit. After this destination chain timestamp, anyone can fill this deposit on the destination chain. If exclusiveRelayer is set to address(0), then this also must be set to 0, (and vice versa), otherwise this must be set >= current time."
                ],
                [
                    "bytes",
                    "message",
                    "Data that can be passed to the recipient if it is a contract. If no message is to be sent, set this field to an empty bytes array: \"\"(i.e. bytes` of length 0, or the \"empty string\"). See Composable Bridging for examples on how messaging can be used."
                ]
            ],
            [
                [
                    "Type",
                    "Name",
                    "Description"
                ],
                [
                    "address",
                    "depositor",
                    "Sender of deposit to be sped up. Does not need to equal msg.sender"
                ],
                [
                    "uint32",
                    "depositId",
                    "UUID of deposit to be sped up"
                ],
                [
                    "uint256",
                    "updatedOutputAmount",
                    "New output amount that depositor requests to receive. Should be lower than outputAmount to be taken seriously by fillers"
                ],
                [
                    "address",
                    "updatedRecipient",
                    "New recipient of deposit."
                ],
                [
                    "bytes",
                    "updatedMessage",
                    "Updated data that is sent to updatedRecipient. As described in section above, this should be set to 0x for the forseeable future."
                ],
                [
                    "bytes",
                    "depositorSignature",
                    "Signed message containing contents here‚Äã"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/supported-chains": {
        "title": "Supported Chains | Across Docs",
        "headers": [
            "Supported Chains",
            "Mainnet Chains",
            "Testnet Chains"
        ],
        "paragraphs": [
            "Arbitrum",
            "42161",
            "Base",
            "8453",
            "Blast",
            "81457",
            "Ethereum",
            "1",
            "Linea",
            "59144",
            "Lisk",
            "1135",
            "Mode",
            "34443",
            "Optimism",
            "10",
            "Polygon",
            "137",
            "Redstone",
            "690",
            "Scroll",
            "534352",
            "zkSync",
            "324",
            "Zora",
            "7777777",
            "Arbitrum",
            "421614",
            "Base",
            "84532",
            "Blast",
            "168587773",
            "Ethereum",
            "11155111",
            "Lisk",
            "4202",
            "Mode",
            "919",
            "Optimism",
            "11155420",
            "Polygon (Amoy)",
            "80002",
            "",
            "Last updated 2 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Mainnet Chains\nTestnet Chains"
        ],
        "tables": [
            [
                [
                    "Name",
                    "Chain ID"
                ],
                [
                    "Arbitrum",
                    "42161"
                ],
                [
                    "Base",
                    "8453"
                ],
                [
                    "Blast",
                    "81457"
                ],
                [
                    "Ethereum",
                    "1"
                ],
                [
                    "Linea",
                    "59144"
                ],
                [
                    "Lisk",
                    "1135"
                ],
                [
                    "Mode",
                    "34443"
                ],
                [
                    "Optimism",
                    "10"
                ],
                [
                    "Polygon",
                    "137"
                ],
                [
                    "Redstone",
                    "690"
                ],
                [
                    "Scroll",
                    "534352"
                ],
                [
                    "zkSync",
                    "324"
                ],
                [
                    "Zora",
                    "7777777"
                ]
            ],
            [
                [
                    "Name",
                    "Chain ID"
                ],
                [
                    "Arbitrum",
                    "421614"
                ],
                [
                    "Base",
                    "84532"
                ],
                [
                    "Blast",
                    "168587773"
                ],
                [
                    "Ethereum",
                    "11155111"
                ],
                [
                    "Lisk",
                    "4202"
                ],
                [
                    "Mode",
                    "919"
                ],
                [
                    "Optimism",
                    "11155420"
                ],
                [
                    "Polygon (Amoy)",
                    "80002"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/fees-in-the-system": {
        "title": "Fees in the System | Across Docs",
        "headers": [
            "Fees in the System",
            "Liquidity Provider Fees",
            "Relayer Fees"
        ],
        "paragraphs": [
            "We view using Across as being similar to lending protocols such as AAVE or Compound. When a user bridges a particular token from one chain to another, the fast bridge isn't \"moving tokens from one chain to another\" but, rather, it is a relayer or the protocol itself providing tokens on the destination chain in return for tokens on the origin chain. We choose to use a similar pricing model for our liquidity provider fees because of this parallel.",
            "We base our pricing model on the one described in AAVE's documentation. Let,",
            "XXXdenote the size of a particular transaction someone is seeking to bridge",
            "0‚â§Ut‚â§10 \\leq U_t \\leq 10‚â§Ut‚Äã‚â§1denote the utilization of the liquidity providers' capital prior to the transaction, i.e. the amount of the liquidity providers' capital that is in use prior to the current transaction",
            "0‚â§U^t‚â§10 \\leq \\hat{U}_t \\leq 10‚â§U^t‚Äã‚â§1denote the utilization of the liquidity providers' capital after to the transaction, i.e. the amount of the liquidity providers' capital that would be in use if the user chose to execute their transaction",
            "UÀâ\\bar{U}UÀâdenote the \"kink utilization\" where the slope on the interest rate changes",
            "R0,R1,R2R_0, R_1, R_2R0‚Äã,R1‚Äã,R2‚Äãdenote the parameters governing the interest rate model slopes",
            "R0R_0R0‚Äãis the interest rate that would be charged at 0% utilization",
            "R0+R1R_0 + R_1R0‚Äã+R1‚Äãis the interest rate that would be charged at UÀâ%\\bar{U}\\% UÀâ%utilization",
            "R0+R1+R2R_0 + R_1 + R_2R0‚Äã+R1‚Äã+R2‚Äãis the interest rate that would be charged at 100% utilization",
            "The (annualized) interest rate model is then defined by",
            "We calculate the (annualized) interest rate for a particular loan by aggregating the marginal increases of utilization by integrating over this function",
            "The actual fee that is charged will be based on making a loan at this rate for a 1 week time-span. The rate that is charged can be computed from:",
            "and the fee would be",
            "",
            "We chose to charge prices this way to ensure that users are paying a \"fair\" price for the amount of utilization that their bridge transaction incurs.",
            "Relayer fees play a similar role in the Across ecosystem as gas fees play in the Ethereum ecosystem. Relayer fees are a fee that the user sets to incentivize relayers to relay your bridge transaction. ",
            "Relaying a transaction has three costs for relayers:",
            "Gas fees: The relayer pays gas to perform the relay and to claim their repayment.",
            "Capital opportunity costs: The fact that the relayer is using their capital to perform a relay means that they are not using it for other yield opportunities.",
            "Capital at risk: A relayer takes on certain risks by relaying funds. If they make a mistake when relaying that could jeopardize their repayment of the capital they invested.",
            "Both Liquidity Provider fees and Relayer fees are implied from the spread between inputAmount and outputAmount in a depositV3 transaction. ",
            "Last updated 7 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "X\nX\nX\ndenote the size of a particular transaction someone is seeking to bridge\n0\n‚â§\nU\nt\n‚â§\n1\n0 \\leq U_t \\leq 1\n0\n‚â§\nU\nt\n‚Äã\n‚â§\n1\ndenote the utilization of the liquidity providers' capital prior to the transaction, i.e. the amount of the liquidity providers' capital that is in use prior to the current transaction\n0\n‚â§\nU\n^\nt\n‚â§\n1\n0 \\leq \\hat{U}_t \\leq 1\n0\n‚â§\nU\n^\nt\n‚Äã\n‚â§\n1\ndenote the utilization of the liquidity providers' capital after to the transaction, i.e. the amount of the liquidity providers' capital that would be in use if the user chose to execute their transaction\nU\nÀâ\n\\bar{U}\nU\nÀâ\ndenote the \"kink utilization\" where the slope on the interest rate changes\nR\n0\n,\nR\n1\n,\nR\n2\nR_0, R_1, R_2\nR\n0\n‚Äã\n,\nR\n1\n‚Äã\n,\nR\n2\n‚Äã\ndenote the parameters governing the interest rate model slopes\nR\n0\nR_0\nR\n0\n‚Äã\nis the interest rate that would be charged at 0% utilization\nR\n0\n+\nR\n1\nR_0 + R_1\nR\n0\n‚Äã\n+\nR\n1\n‚Äã\nis the interest rate that would be charged at \nU\nÀâ\n%\n\\bar{U}\\% \nU\nÀâ\n%\nutilization\nR\n0\n+\nR\n1\n+\nR\n2\nR_0 + R_1 + R_2\nR\n0\n‚Äã\n+\nR\n1\n‚Äã\n+\nR\n2\n‚Äã\nis the interest rate that would be charged at 100% utilization",
            "R\n0\nR_0\nR\n0\n‚Äã\nis the interest rate that would be charged at 0% utilization\nR\n0\n+\nR\n1\nR_0 + R_1\nR\n0\n‚Äã\n+\nR\n1\n‚Äã\nis the interest rate that would be charged at \nU\nÀâ\n%\n\\bar{U}\\% \nU\nÀâ\n%\nutilization\nR\n0\n+\nR\n1\n+\nR\n2\nR_0 + R_1 + R_2\nR\n0\n‚Äã\n+\nR\n1\n‚Äã\n+\nR\n2\n‚Äã\nis the interest rate that would be charged at 100% utilization",
            "Liquidity Provider Fees\nRelayer Fees"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/actors-in-the-system": {
        "title": "Actors in the System | Across Docs",
        "headers": [
            "Actors in the System",
            "User",
            "Relayer ",
            "Dataworker",
            "Liquidity Provider",
            ""
        ],
        "paragraphs": [
            "A user is an actor who submits intent orders, in the form of a deposit order, to bridges assets between L2s and L1 with Across. Users pay relayers and liquidity providers in order to send tokens instantly between networks.",
            "Relayers compete to fulfill users' deposit requests by sending depositors the specified output amount of the specified token on the specified destination chain with optional data specifying required actions to execute on the destination.",
            "Relayers extend short-term token loans to Users in exchange for fees. Users incentivize relayers to fill their order by the implied fee of the spread between input amount and output amount specified in the users' order. At the time of fill, relayers request repayment on their desired repayment chain, which can be any Across supported chain. Relayers are refunded the users' input amount less the realized LP fee at time of deposit, and depends on the specified repayment chain. ",
            "Generally, relayers take on the following risks when fulfilling a deposit and are compensated accordingly by users:",
            "Cost of capital: relayers send tokens to a user in order to fulfill a deposit and are reimbursed when their valid fill is included in a bundle",
            "Gas costs: relayers pay gas on destination chains to fulfill deposits",
            "Software risk: an honest relayer might have a bug in its software that sends an invalid fill",
            "Finality risk: a deposit on the origin chain might disappear if the origin chain reorganizes",
            "Running a relayer is permissionless. Risk labs provides open source, opinionated implementations of the Relayer but there are technically many ways to customize the behavior of the software. Developers can run the open source relayer software or implement their own. You can find more information about running relayers here. ",
            "Dataworkers support stability and healthy functioning of the system by refunding relayers and moving system assets between networks.  Whitelisted dataworkers are in charge of proposing \"bundles\" to be optimistically validated by the Across system. These proposers must post a bond when proposing. Proposers can also be removed or changed by an Across DAO Governance vote. Anyone can dispute an invalid bundle and earn a dispute bond, which includes part of the proposer's bond. Each bundle contains instructions for:",
            "Refunding relayers for valid fills",
            "Sending tokens to SpokePools that can be used to pay such refunds",
            "Sending tokens to SpokePools that can be used to execute slow fills",
            "Withdrawing funds originating from deposits on SpokePools back to the HubPool",
            "The dataworker's responsibility is prescribed in UMIP-157 and extended by UMIP-179 and a reference implementation can be found here. An example proposal transaction can be seen here.",
            "A liquidity provider or LP is an actor who deposits assets into one of the pools on Across.to/pool. All Across LP pools reside on mainnet, and LPs only interact with these mainnet pools. Liquidity Providers provide the capital that enables the flexibility for relayers choose a repayment chain in exchange for fees. Moreover, liquidity providers provide capital that can be used to fulfill deposits in the case that no relayers can fast fill the deposit. ",
            "Generally, liquidity providers take on the following risks when passively providing liquidity to Across:",
            "Cost of capital: LP's must deposit their tokens into an Across contract on mainnet.",
            "Liquidity risk: If Across is experiencing high demand then there is a chance that so much of the LP capital is reallocated to repaying relayers, fulfilling deposits and being rebalanced through canonical bridges that not all LP's who want to withdraw can withdraw at the current moment. This is a transitory situation as once funds are received from the canonical bridge LP's will be able to withdraw. ",
            "Last updated 6 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Cost of capital:\n relayers send tokens to a user in order to fulfill a deposit and are reimbursed when their valid fill is included in a \nbundle\nGas costs:\n relayers pay gas on destination chains to fulfill deposits\nSoftware risk:\n an honest relayer might have a bug in its software that sends an invalid fill\nFinality risk\n:\n a deposit on the origin chain might disappear if the origin chain \nreorganizes",
            "Refunding relayers for valid fills\nSending tokens to SpokePools that can be used to pay such refunds\nSending tokens to SpokePools that can be used to execute slow fills\nWithdrawing funds originating from deposits on SpokePools back to the HubPool",
            "Cost of capital:\n LP's must deposit their tokens into an Across contract on mainnet.\nLiquidity risk:\n If Across is experiencing high demand then there is a chance that so much of the LP capital is reallocated to repaying relayers, fulfilling deposits and being rebalanced through canonical bridges that not all LP's who want to withdraw can withdraw at the current moment. This is a transitory situation as once funds are received from the canonical bridge LP's will be able to withdraw.",
            "User\nRelayer \nDataworker\nLiquidity Provider"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/security-model-and-verification": {
        "title": "Security Model and Verification | Across Docs",
        "headers": [
            "Security Model and Verification"
        ],
        "paragraphs": [
            "The Across smart contracts plus the UMIP provide the fundamental rules of the Across Protocol. The ACROSS-V2 price in UMIP-157 and extended by UMIP-179 precisely define the constraints and rules of the system. Actors in the system (relayer, dataworker) must behave in accordance to these rules. The system is secured by optimistic verification of relayer repayments and rebalance instructions by UMA's Optimistic Oracle, requiring only a single honest actor to dispute invalid proposals to keep the system secure. ",
            "Please refer to UMIP-157 and UMIP-179 for detailed information about system architecture, security model and verificaiton. ",
            "Last updated 7 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/security-model-and-verification/disputing-root-bundles": {
        "title": "Disputing Root Bundles | Across Docs",
        "headers": [
            "Disputing Root Bundles",
            "About",
            "Manual Dispute Procedure",
            "Automated Dispute Procedure",
            "Installation",
            "Execution"
        ],
        "paragraphs": [
            "Across requires proposals and disputes to be accompanied by a bond. This bond is returned if the proposal or dispute is correct, and is sacrificed if it is found to be incorrect. This protects against attempts to incorrectly move funds, as well as spam and other denial of service attempts.The Across Bond Token (ABT) is the bond collateral required by the HubPool contract. This is a WETH-like contract that is minted in return for depositing Ether, and can be redeemed for the underlying Ether at any time. ABT implements custom ERC20 transferFrom() logic in order to limit the addresses that are able to make HubPool root bundle proposals.",
            "1.Check the required bond token and amount (nominally 0.45 ABT) by calling bondToken() and bondAmount() on the HubPool.",
            "2.Mint the bond token as necessary by caling deposit() on the BondToken contract.",
            "3.Ensure that the HubPool has permission to pull the bond during the dispute. Increase the allowance as necessary by calling appprove() on the BondToken contract. The address to approve is 0xc186fa914353c44b2e33ebe05f21846f1048beda.",
            "4.Call disputeRootBundle() on the HubPool.",
            "The Across relayer-v2 repository contains a utility script that automates each of the above steps. Prerequisites are:",
            "1.The relayer-v2 package must be installed.",
            "2.The mnemonic for an EOA must be set in the relayer-v2 .env file.",
            "1.The configured EOA must be funded with at least 0.45 ABT or ETH (1 ABT == 1 ETH), plus additional ETH for gas to handle the necessary deposit, approval and/or dispute transactions.",
            "2.It is sufficient for the entire amount to be held in ETH, since the dispute script automates the steps of minting ABT and approving the HubPool to spend it.",
            "3.The actual amounts are subject to change based on the prevailing gas price at the time of the dispute, and the configured bond amount.",
            "Last updated 7 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "About\nManual Dispute Procedure\nAutomated Dispute Procedure\nInstallation\nExecution"
        ],
        "tables": [],
        "code_blocks": [
            {
                "id": "sxaBxhGzJFEA",
                "code": "$ git clone https://github.com/across-protocol/relayer-v2.git\n$ cd relayer-v2\n$ yarn install && yarn build\n\n# Copy the predefined sample config and update the MNEMONIC variable in\n# .env to match the relevant mnemonic.\n$ cp .env.example .env"
            },
            {
                "id": "um4e6Dju2TWB",
                "code": "$ yarn dispute\n\n# The dispute script will dump information about the Bond Token and \n# latest HubPool proposal. If necessary, it will automatically mint the \n# requisite amount of the bond token and will approve the HubPool to use \n# it. At the conclusion, the script will provide the transaction hash of\n# the most recent proposal and will request to re-run with the flag\n#\n#     --txnHash <proposal-transaction-hash>\n# \n# Re-running the script with this additional argument will automatically \n# submit a dispute.\n\n$ yarn dispute --txnHash <proposal-transaction-hash>"
            }
        ],
        "summaries": []
    },
    "https://docs.across.to/reference/security-model-and-verification/validating-root-bundles": {
        "title": "Validating Root Bundles | Across Docs",
        "headers": [
            "Validating Root Bundles"
        ],
        "paragraphs": [
            "Root bundles instruct the Across system on how to transfer funds between smart contracts on different chains to refund relayers and fulfill user deposits.",
            "This explainer video explains why root bundles are critical to making the Across system work and how they are validated. Root bundles are optimistically validated and ultimately secured by the UMA Oracle. It is recommended that UMA voters and other actors in the UMA ecosystem have an understanding of how Across utilizes the UMA oracle.",
            "Last updated 7 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/reference/tracking-events": {
        "title": "Tracking Events | Across Docs",
        "headers": [
            "Tracking Events",
            "Using our API",
            "Using your own managed service"
        ],
        "paragraphs": [
            "This section contains hints for how you can implement your own managed service to track Across events throughout their lifecycle. As an alternative, we also host a public managed solution that you can learn more about in the API section.",
            "See API reference for GET /deposit/status to query the status of a single deposit. ",
            "The recommended solution for tracking all Across deposits originating from your integration, for a single user, is to store the user's  depositId and originChainId from each transaction originating from your app, and then get the status of each via GET /deposit/status. ",
            "Deposit and corresponding fill events are conveniently scraped by a database and available here. The database implementation can be found in this repository.",
            "When a user deposits capital to a SpokePool, a V3FundsDeposited event is emitted. This event is now emitted for both deposit() (legacy function interface) and depositV3() calls. FundsDeposited, the V2 event, is no longer possible to emit.",
            "This data comprises the new deposit's \"RelayData\" which is combined with the block.chainId of the SpokePool that emitted the event to form:",
            "There are two ways to determine whether a deposit has been filled on the destinationChain:",
            "Each fill of a deposit emits a FilledV3Relay which emits all of the data that you'd need to construct another V3RelayData structure (along with the destination chain's block.chainId). If this relay hash matches the deposit relay hash, then the deposit is considered valid and the filler will receive a refund in the next bundle. \n",
            "Call the SpokePool.fillStatuses(bytes32): uint256 function passing in the deposit relay hash. The possible fill statuses are:",
            "",
            "When an unfilled deposit's fillDeadline exceeds the destination chain's block.timestamp, it is no longer fillable--the SpokePool contract on the destination chain will revert on a fillRelay() call.",
            "Expired deposits are technically refunded by the next root bundle proposed to the HubPool containing an expired deposit refund. Root bundles contain bridge events for a set of block ranges (start and end blocks) for each chain supported in Across. Root bundles are proposed optimistically as a batch of Merkle Roots, one of which is a list of refund payments including deposits that expired in the deposit's origin chain block range. Therefore, to know when precisely an expired deposit was refunded requires reconstructing root bundle data. This is a complex task and we're working on making this data available in a hosted service with an API interface.",
            "In the meantime, we believe its accurate to state that expired deposits will be refunded approximately 90 minutes after their fillDeadline. Expired deposits are sent to the depositor address on the originChainId. The 90 minute figure assumes that on average, deposits expire in the middle of a pending root bundle proposal which implies that the next root bundle will contain the expired deposit refund. Because root bundle proposals are validated optimistically and the current challenge period is 60 minutes, then on average it will take 30 minutes for the next root bundle to be proposed containing a refund for the deposit and another 60 minutes for that root bundle to be executed.",
            "Fill ETAs for deposits vary based on route and available filler liquidity. For example, most deposit transactions will not be filled until they probabilistically finalized on the origin chain, where the deposit occurred.",
            "In general, deposits that exceed current filler liquidity on the destination chain will be delayed, and unprofitable deposits (where the difference in the output amount and the input amount is insufficient to cover the filler's transaction and opportunity costs) might never be filled until they expire. Expired deposits will eventually be refunded, as described above. ",
            "The Limits endpoint can be called with the deposit information to forecast the fill ETA. If the deposit amount exceeds the maxDepositShortDelay, then the deposit is likely to have been marked for slow fill. To deterministically check if a deposit has been marked for slow fill, you can call the fillStatuses() function on the destination SpokePool as described above.",
            "Last updated 3 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Using our API\nUsing your own managed service"
        ],
        "tables": [],
        "code_blocks": [
            {
                "id": "2h5sUJN5g8H6",
                "code": "event V3FundsDeposited(\n        address inputToken,\n        // Note: outputToken can be set to 0x0 (zero address) in which case, the filler\n        // should replace this address with the \"equivalent\" destination chain token\n        // as the input token. For example, if input token is USDC on chain A, then the output\n        // token should be the USDC token supported by Across on the destination chain\n        address outputToken,\n        uint256 inputAmount,\n        uint256 outputAmount,\n        uint256 indexed destinationChainId,\n        uint32 indexed depositId,\n        uint32 quoteTimestamp,\n        uint32 fillDeadline,\n        uint32 exclusivityDeadline,\n        address indexed depositor,\n        address recipient,\n        address exclusiveRelayer,\n        bytes message\n)"
            },
            {
                "id": "6nTuOb2cEE3t",
                "code": "// This struct represents the data to fully specify a **unique** relay submitted on this chain.\n// This data is hashed with the chainId() and saved by the SpokePool to prevent collisions and protect against\n// replay attacks on other chains. If any portion of this data differs, the relay is considered to be\n// completely distinct. See _getV3RelayHash() below for how the relay hash is derived from the relay data.\nstruct V3RelayData {\n        // The address that made the deposit on the origin chain.\n        address depositor;\n        // The recipient address on the destination chain.\n        address recipient;\n        // This is the exclusive relayer who can fill the deposit before the exclusivity deadline.\n        address exclusiveRelayer;\n        // Token that is deposited on origin chain by depositor.\n        address inputToken;\n        // Token that is received on destination chain by recipient.\n        address outputToken;\n        // The amount of input token deposited by depositor.\n        uint256 inputAmount;\n        // The amount of output token to be received by recipient.\n        uint256 outputAmount;\n        // Origin chain id.\n        uint256 originChainId;\n        // The id uniquely identifying this deposit on the origin chain.\n        uint32 depositId;\n        // The timestamp on the destination chain after which this deposit can no longer be filled.\n        uint32 fillDeadline;\n        // The timestamp on the destination chain after which any relayer can fill the deposit.\n        uint32 exclusivityDeadline;\n        // Data that is forwarded to the recipient.\n        bytes message;\n}\n\nfunction _getV3RelayHash(V3RelayData memory relayData) private view returns (bytes32) {\n        return keccak256(abi.encode(relayData, chainId()));\n}"
            },
            {
                "id": "Bu98ooTyFOg6",
                "code": "event FilledV3Relay(\n        address inputToken,\n        // Note: outputToken should never be 0x0 in this event, unlike in a V3FundDeposited\n        // event. If this is 0x0 in the corresponding deposit event, then this should\n        // be equal to the equivalent destination token supported by this SpokePool.\n        address outputToken,\n        uint256 inputAmount,\n        uint256 outputAmount,\n        uint256 repaymentChainId,\n        uint256 indexed originChainId,\n        uint32 indexed depositId,\n        uint32 fillDeadline,\n        uint32 exclusivityDeadline,\n        address exclusiveRelayer,\n        address indexed relayer,\n        address depositor,\n        address recipient,\n        bytes message,\n        V3RelayExecutionEventInfo relayExecutionInfo\n)"
            },
            {
                "id": "a4sIf59Tebv3",
                "code": "// Fill status tracks on-chain state of deposit, uniquely identified by relayHash.\nenum FillStatus {\n        // Self-explanatory\n        Unfilled, \n        // Someone requested a slow fill for this deposit, it will be \n        // slow filled to the user in the next root bundle unless it gets filled\n        // by a relayer before that bundle is validated and the slow fill \n        // is executed.\n        RequestedSlowFill,\n        // Filled by a relayer.\n        Filled\n}"
            }
        ],
        "summaries": []
    },
    "https://docs.across.to/relayers/running-a-relayer": {
        "title": "Running a Relayer | Across Docs",
        "headers": [
            "Running a Relayer",
            "Requirements",
            "Installation",
            "Updating",
            "Configuration",
            "Notes on requirements to RPC Providers",
            "Using a Redis in-memory database to improve performance",
            "Managing cross chain inventory",
            "Security Considerations",
            "Running the Relayer for the first time",
            "Which account will be used to send transactions?",
            "Which tokens can be relayed?",
            "How can I learn more about the code behind the bot's logic?",
            "Auxiliary Topics:",
            "Across V3 smart contracts",
            "Across V3 UMIP",
            "Additional relayer FAQs:",
            "How do Relayers get refunded?",
            "What is a root bundle?",
            "How often do new root bundles get published and executed?"
        ],
        "paragraphs": [
            "Technical instructions that someone comfortable with command line can easily follow to run their own Across V3 relayer. All of the code in this repository can be found in this GitHub repository.",
            "The Across v3 Relay Bot is implemented in Node.js and is capable of running on a variety of platforms. See the following table for platform recommendations.",
            "CPU",
            "64-bit Dual Core @ 2+ GHz",
            "RAM",
            "4GB",
            "OS",
            "UNIX-like (GNU/Linux, MacOS)",
            "A helper script is available to automate updates. This performs the following actions:",
            "Flushes any existing installed dependencies.",
            "Pulls down the latest relayer-v3 commit.",
            "Installs all dependencies and builds the relayer.",
            "Displays the latest commit in the relayer-v3 repository.",
            "This update helper is offered as a convenience. After update, the operator must manually verify that the update succeeded and that the commit shown matches the intended target.",
            "This section describes the environment variable configuration that the bot requires in order to operate. This is the minimum configuration for running a relayer that operates on all supported tokens for all destination chains. You just need to change the configs at the top.",
            "Operators can exclude tokens/destination chains by not having a balance for that token on that destination chain. For customizing tokens/destination chains while having balances, see the advanced section for all supported configs.",
            "The relayer is dependent on querying historical blocks on each chain. The RPC provider must therefore support making archive queries. If the RPC provider cannot service archive queries then the relayer will fail with reports of obscure RPC errors.",
            "The relayer queries a lot of events from each chain's RPC that Across supports. Therefore, we use an in-memory database to improve performance and cache repeated RPC requests. Installation instructions can be found here. Once installed, run redis-server in one terminal window and then open another one to continue running the relayer from.",
            "The redis server is used to cache the responses of RPC-intensive repetitive requests, like eth_getLogs, or internally-computed data like getBlockForTimestamp. Caching of data is subject to the age of the input response from the RPC provider, such that a minimum block age is required before it will be retained. This provides some protection against caching invalid data, or valid data becoming invalid (or otherwise changing) due to chain forks/re-orgs.",
            "The relayer bot is designed to use the same account across each of the supported chains. Therefore, the bot can be told to automatically rebalance its inventory across chains and target some allocation.",
            "The best way to demonstrate how rebalancing can be customized is to walk through an example inventory configuration. This example can be copied into a file and configured in the bot via the RELAYER_EXTERNAL_INVENTORY_CONFIG environment variable. The file is JSON-parsed and so must be valid JSON.",
            "First let's look at the \"tokenConfig\". This informs the relayer how it should distribute its token balances across the different networks. Each of the keys of the \"tokenConfig\" object (\"WETH\", \"DAI\", \"USDC\", \"WBTC\") represent the Mainnet symbol of the ERC20 token that we want to automatically control inventory for. These resolve to the following mainnet addresses: WETH, DAI, USDC, and WBTC. ",
            "Diving into WETH's token configuration, notice that it has an object containing \"targetPct\", \"thresholdPct\", \"unwrapWethThreshold\", and \"unwrapWethTarget\" mapped to each network ID. The \"targetPct\" and \"thresholdPct\" instructs the relayer account on Mainnet when to send funds to the network with the associated network ID. ",
            "The relayer is always aware of its aggregate funds across all chains, so for example if the account has 10 WETH on Mainnet, 5 on Optimism, 4 on Arbitrum, 3 on Polygon, then it has a total of 24 WETH. The allocations are: 8/24 on Optimism, 8/24 on Arbitrum, etc.",
            "When the relayer's allocation for a specific chain drops below the \"thresholdPct\", then the relayer will send funds from its Mainnet account to the chain with the shortfall so that its post-transfer allocation is increased to the \"targetPct\". In the example config above, if the allocation percent on Optimism were to drop below 5%, then the relayer would send funds from Mainnet to Optimism to bring its allocation to 8%.",
            "All funds are sent through the canonical L1-->L2 bridges and the logic implementing such rebalances can be found here.",
            "Note that the \"targetPct\" and \"thresholdPct\" are unused for the mainnet token config (i.e. for the row with ID \"1\") but are included to avoid a compile-time error.",
            "When Inventory Management is configured, the relayer will tend to request repayment on mainnet. For example, if the relayer makes a USDC fill on Polygon, then it will expect to receive the USDC repayment on mainnet. This means that over time, the relayer's allocation on Polygon will decrease and the balance will shift to mainnet.",
            "Therefore, the inventory rebalance logic also provides a function that overrides the repayment chain ID to try to maintain its target allocation. This happens automatically before submitting any fill by this function.",
            "The \"unwrapWethThreshold\" and \"unwrapWethTarget\" tell the relayer when to unwrap WETH into ETH to keep enough ETH on hand for paying gas costs. These configs are unused on Polygon which does not pay gas in ETH. Moreover, these configs should only be set in the token configuration for WETH.",
            "If the relayer's ETH balance drops below the \"unwrapWethThreshold\", then it will unwrap enough WETH to increase its ETH balance to the \"unwrapWethTarget\" value.",
            "This logic can be found here.",
            "Wrap ETH",
            "The \"wrapEtherThreshold\" is used on chains where the relayer might receive ETH over the canonical bridges, instead of WETH. Because of this fact, the relayer can end up holding a lot of ETH on L2 and not enough WETH.",
            "If the relayer account's ETH balance drops below this value, then it will wrap any excess ETH above the value into WETH. Its important that this value is set higher than the \"unwrapWethTarget\" for WETH for Optimism. In the example above, the \"unwrapWethTarget/Threshold\" is 0.1/0.025 and the \"wrapEtherThreshold\" is 0.125, meaning that the relayer on Optimism will unwrap WETH if its ETH balance is less than 0.025 and increase its balance to 0.1, and will wrap ETH if its balance is above 0.125.",
            "Logic for wrapping ETH can be found here.",
            "This description describes a basic set of security considerations that relay bot operators should be aware of. See Recommendations for suggestions on how to improve the security of relay bot instances.",
            "This is not a complete security guide. Relay bot operators solely assume the risk of loss of fu",
            "The Across v3 relay bot communicates with various public RPC endpoints, and thus requires outbound network access. Unknown/untrusted network actors may be able to communicate with the relay bot host. It's important to reduce the attack surface area that the host environment exposes, in terms of:",
            "Network services listening on public interfaces.",
            "Interfaces opened for remote administration, and their permitted authentication mechanisms.",
            "Third-party installations that may autonomously communicate (i.e. phone home) over the network.",
            "The Across relay bot requires an in-memory copy of an Ethereum private key in order to sign relay transactions. This in-memory copy is typically loaded from the execution environment, via the following environment variables:",
            "MNEMONIC (when run with --wallet mnemonic)",
            "PRIVATE_KEY (when run with --wallet privateKey)",
            "When not specified directly via environment variables, these configuration items can be saved in the filesystem in a .env file, in the relayer-v3 working directory. Relay bot operators should be aware of at least the following:",
            "Depending on the .env mode flags, users or programs with filesystem access may be able to read secrets from the .env file.",
            "When storing secrets on disk, anyone with raw disk access may be able to override filesystem permissions and recover file contents. This includes:",
            "People with system administrative privileges.",
            "People with physical disk/hardware access.",
            "Vendors of cloud-based execution environments (i.e. VM hosts).",
            "During operation, the relayer-v3 bot retains secret keying information in-memory. Anyone with the ability to dump application or system memory may be able to retrieve secret keying material.",
            "The Across relay bot supports a bespoke Google Cloud key management interface (gckms), whereby the bot retrieves keying material from a secured, trusted key management. Keying material retrieved over the gckms interface is stored locally in-memory, but is not saved to disk.",
            "The gckms interface is tailored for use by Risk Labs and is not currently intended for use by third-party bot operators. Support for generic third-party key management systems may be added to the relay bot in future.",
            "Deploy relay bot instances in isolated environments (i.e. dedicated VM/container environment, or dedicated hardware).",
            "Adhere to basic system administration and hardening practices. NIST 800-123 Guide to General Server Security may be useful.",
            "Never install software from untrusted sources, and verify software packages before installation/execution.",
            "Limit the ability for malicious network actors to gain system access by restricting inbound network traffic to trusted hosts and/or services. Drop all other traffic.",
            "Avoid the use of password-based authentication schemes for remote login services. Use key-based authentication (i.e. SSH keys) instead.",
            "Ensure that filesystem ownership and permission flags are set appropriately at all times. These attributes should be periodically reviewed for correctness.",
            "Ensure that parties with raw disk access are trusted.",
            "Note: Where untrusted or unknown parties may have raw disk access, filesystem encryption schemes may be useful in reducing the opportunity for theft of secret keying material.",
            "Ensure that parties with the ability to dump system and/or application memory are trusted.",
            "Note: This applies primarily to vendors providing virtualised execution environments - i.e. cloud/VM hosts.",
            "Maintain at least one secure offline copy (backup) of the secret keying material. Backups should be periodically reviewed for correctness.",
            "Once you've installed and built the relayer code and set your desired environment variables, you're all set to run the relayer code. The entry point to run the code is the command (choose one of the following):",
            "This will run the relayer in \"simulation mode\" meaning that it will simulate the transactions that would fill deposits, but will not submit them. This will give you a chance to review transactions before funds are sent. ",
            "On the first run, the bot should approve various SpokePool contracts to withdraw ERC20's from it. This is required to fulfill relays. These approval transactions are not \"simulated\" currently and will still be sent even when running in simulation mode. Approvals will only be sent for tokens with nonzero balances in the relayer account.",
            "If the bot successfully completes a run, you will see this log before it exits: ",
            "When you feel ready to run the relayer and send your first relay, set SEND_RELAYS=true to exit simulation mode!",
            "When running with a MNEMONIC configured, the first account associated with the MNEMONIC set in the environment will be used. Be sure to add ETH and any token balances to its account so that it can send relays.",
            "WETH, USDC, DAI, USDT, WBTC, UMA, ACX, BAL, SNX & POOL. This list is likely to require updates in the future. Work is being done to automate the latest token list.",
            "The relayer's entry point file is Relayer/index.ts.",
            "The relayer bot first identifies all unfilled deposits across each of the chains. Deposit events are fetched here by the SpokePoolClient for each chain. Using these unfilled deposits as input, the relayer will attempt to fill them based if it has the token balance on the destination chain to do so.",
            "The smart contracts can be found at this repository. They have been audited by OpenZeppelin. A high level video overview of the contract architecture can be found here.",
            "UMIP-179 explains how \"valid\" relays are identified, which are relays that correctly filled a deposit and paid the correct fees and are due to be returned their relayed amount plus a relay fee.",
            "The Across relayer, proposer, disputer and executor instances are the UMIP-179 reference implementations.",
            "Relayers are paid back after a root bundle containing the relayer‚Äôs fulfillment is published to mainnet and passes a challenge period. Relayers can choose which chains they are paid back on. When running the example relayer code, they are by default repaid on the chain that they fulfill deposits on. The relayer can override this setting.",
            "A root bundle for a block range is a set of three Merkle roots that contains all of the information necessary to refund relayers who fulfilled a deposit during the block range. A root bundle is valid only if it contains all of the expected information for a block range. This UMIP explains at length exactly how to construct a valid root bundle.",
            "The current liveness period is 5,400 seconds (1.5 hours). You can always query it on the HubPool by calling the read-only method liveness(), and only one root bundle can be proposed at a time. So, the fastest cadence for root bundles being proposed is every 1.5 hours. Each root bundle contains approximately all of the relayer refunds up to the current time (as of the proposal) and as old as right after the preceding root bundle proposal time. A 'dataworker' is what we refer to as the agent who gathers all Fill and Deposit events from all of the chains that Across V3 supports bridging to and from in order to construct these Merkle root bundles. A dataworker could choose to propose a new root bundle right after the current one passes liveness, or it can choose to wait. Realistically, we expect that a dataworker will only submit a new root bundle after it contains a certain volume of refunds, for capital efficiency reasons. So to summarize:",
            "Relayer refunds are contained in root bundles that are optimistically published to the HubPool",
            "Once the root bundle proposal passes liveness, refunds can be sent to relayers. At this point, relayers are made whole and receive an additional relayer fee",
            "The fastest cadence of root bundle proposals is once every two hours. In the worst case, root bundles can take much longer if volume is low across the system",
            "A dataworker can propose a bundle at any time. However, if a current bundle is in liveness - it is required that either that bundle be disputed or the bundle passes liveness and is executed before a new bundle is proposed.",
            "",
            "",
            "Last updated 1 month ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Flushes any existing installed dependencies.\nPulls down the latest relayer-v3 commit.\nInstalls all dependencies and builds the relayer.\nDisplays the latest commit in the relayer-v3 repository.",
            "Network services listening on public interfaces.\nInterfaces opened for remote administration, and their permitted authentication mechanisms.\nThird-party installations that may autonomously communicate (i.e. phone home) over the network.",
            "MNEMONIC (when run with --wallet mnemonic)\nPRIVATE_KEY (when run with --wallet privateKey)",
            "Relayer refunds are contained in root bundles that are optimistically published to the HubPool\nOnce the root bundle proposal passes liveness, refunds can be sent to relayers. At this point, relayers are made whole and receive an additional relayer fee\nThe fastest cadence of root bundle proposals is once every two hours. In the worst case, root bundles can take much longer if volume is low across the system\nA dataworker can propose a bundle at any time. However, if a current bundle is in liveness - it is required that either that bundle be disputed or the bundle passes liveness and is executed before a new bundle is proposed.",
            "Requirements\nInstallation\nUpdating\nConfiguration\nNotes on requirements to RPC Providers\nUsing a Redis in-memory database to improve performance\nManaging cross chain inventory\nSecurity Considerations\nRunning the Relayer for the first time\nWhich account will be used to send transactions?\nWhich tokens can be relayed?\nHow can I learn more about the code behind the bot's logic?\nAuxiliary Topics:\nAcross V3 smart contracts\nAcross V3 UMIP\nAdditional relayer FAQs:\nHow do Relayers get refunded?\nWhat is a root bundle?\nHow often do new root bundles get published and executed?"
        ],
        "tables": [
            [
                [
                    "Resource",
                    "Recommended"
                ],
                [
                    "CPU",
                    "64-bit Dual Core @ 2+ GHz"
                ],
                [
                    "RAM",
                    "4GB"
                ],
                [
                    "OS",
                    "UNIX-like (GNU/Linux, MacOS)"
                ]
            ]
        ],
        "code_blocks": [
            {
                "id": "6d6e5e39786745f7b116710fc81f9f09",
                "code": "# Clone relayer code with Github CLI or git clone.\ngit clone https://github.com/across-protocol/relayer-v3.git\ncd relayer-v3\n\n# Establish environment file and restrict filesystem permissions.\ntouch .env\nchmod 0600 .env\n\n# The private key or seed phrase for the relayer can be stored in a\n# dedicated file. Operators should be especially careful to set the file\n# permissions correctly and to backup any secrets securely. The path to\n# the secret is set via the SECRET env var (optionally specified in\n# .env). The file may be stored anywhere in the file system but must be\n# readable by the user that runs the relayer.\ntouch .secret\nchown <user>:<group> .secret\nchmod 0600 .secret\necho <private-key-or-mnemonic> > .secret\nchmod 0400 .secret\n\n# Install dependencies and build relayer.\n# Nodejs and yarn are required.\nyarn install\nyarn build\n\n# Run unit tests.\nyarn test\n\n# Apply any necessary changes to .env and mark it read-only.\nchmod 0400 .env"
            },
            {
                "id": "71dfd61e1bfb47e4b70f8ed580a9506f",
                "code": "yarn update"
            },
            {
                "id": "ffd34a5f1b3c4e75b17df4202686db1b",
                "code": "# Do change the following configs:\n\n# SECRET identifies a separate file containing a private key or mnemonic\n# to be used by the relayer. The file must contain only the raw key or\n# mnemonic. Critical: Ensure that the filesystem permissions for this\n# file are properly configured (i.e. owned by one specific user, not\n# world-readable, ...).\n# SECRET=<path-to-private-key-or-mnemonic>\nSECRET=.secret\n\n# Define RPC providers for each chain. One RPC provider is specified\n# per line. Format:\n# RPC_PROVIDER_<PROVIDER-NAME>_<CHAIN-ID>=<ENDPOINT-URL>\nRPC_PROVIDER_INFURA_1=https://mainnet.infura.io/v3/...\nRPC_PROVIDER_INFURA_10=https://optimism-mainnet.infura.io/v3/...\n# Repeat this for each supported chain (1, 10, 137, 42161, ...)\n\nRPC_PROVIDER_ALCHEMY_1=https://eth-mainnet.g.alchemy.com/v2/...\n# Repeat this for each supported chain (1, 10, 137, 42161, ...)\n\n# Specify RPC provider preferences. The first provider is always used.\n# Subsequent providers are used as backups in event of a higher\n# priority provider being unavailable, or failing quorum. If\n# NODE_QUORUM is > 1, there must be at least NODE_QUROUM number of\n# providers defined, and some RPC queries will be performed against\n# NODE_QUORUM number of providers in parallel.\nRPC_PROVIDERS=INFURA,ALCHEMY\n\n# Per-chain overrides are possible. In the example below, LlamaNodes\n# is preferred on Ethereum and Polygon.\nRPC_PROVIDERS_1=LLAMANODES,INFURA,ALCHEMY\nRPC_PROVIDERS_137=LLAMANODES,INFURA,ALCHEMY\n\n# Enable on-chain relayer functionality. This is disabled by default\n# and must be explicitly enabled for the relayer to send transactions.\n# This can be used to run bot in \"simulation mode\". To turn bot on,\n# set to \"true\".\nSEND_RELAYS=false\n\n# Deposit lookback window, specified in seconds. This is subtracted\n# from the current time and is resolved to a block number on each\n# chain, effectively controlling how far back in time the relayer\n# will scan for unfilled deposits. \nMAX_RELAYER_DEPOSIT_LOOK_BACK=1800\n\n# Gas fees are difficult to estimate correctly, and the strategy for\n# setting  gas might depend on the priorities of the relay bot operator.\n# Gas fees can therefore be scaled on each chain. Note that `ethers` is\n# used for sourcing gas estimates, and it can supply a default value of\n# 1.5 Gwei for priority fees. This is notably seen on Optimism (chainId\n# 10), and can lead to overpriced transactions. Operators are encouraged\n# to tune these scalers to meet their own needs and risk profile.\nMAX_FEE_PER_GAS_SCALER_10=1.2\nPRIORITY_FEE_SCALER_10=0.1\n\n#### Do not change the configs below without checking with the Across team #####\n#### Or unless you strongly know what you're doing\n\n# A Redis in-memory DB can drastically speed up the performance\n# of the bot. This is technically not required, but reduces the\n# instance of repeated network queries and therefore reduces\n# the time and network bandwidth required for successful relay\n# bot operation.\n# Install redis and then ensure that redis-server is started:\n#     https://redis.io/docs/getting-started/\n# Under the hood, the relayer will cache JSON-rpc request data\n# from requests like `eth_getBlock` in the Redis DB.\nREDIS_URL=\"redis://127.0.0.1:6379\""
            },
            {
                "id": "4b949e1b930049f4bfd6af7f72fd5e0e",
                "code": "# Amount of time to wait (in seconds) between bot loops. This can be\n# set to 0 to run once and exit (recommended). Operators can schedule\n# relayer externally (i.e. via cron or another job scheduler).\n#\n# If set to a non-zero value such as 10, the bot will run through all\n# instructions, sleep for 10 seconds, then run again. This mode is not\n# recommended.\nPOLLING_DELAY=0\n\n# The NODE_MAX_CONCURRENCY environment variable controls the\n# maximum number of concurrent requests can be issued to a\n# single RPC provider. Per-chain overrides are possible by\n# appending _<chainID>=<value>. In the event that rate-limiting\n# is occurring (429 responses to RPC requests) then concurrency\n# can be reduced as an alternative to upgrading the RPC provider\n# subscription/quota. In the example below, the global default\n# is set to 25, and is overridden to 40 for Ethereum.\nNODE_MAX_CONCURRENCY=25\nNODE_MAX_CONCURRENCY_1=40\n\n# The relayer can be configured to require a minimum return on\n# capital outlaid when filling relays. This minimum return is\n# specified as a multiplier of the amount to be allocated to each\n# fill. Minimum fees can also be configured per token(symbol)/route\n# combination. Examples:\n# Require 1 bps as the global default (unless overridden).\nMIN_RELAYER_FEE_PCT=0.0001\n# Override: Require at least 1.5 bps on USDC from Arbitrum to Ethereum.\nMIN_RELAYER_FEE_PCT_USDC_42161_1=0.00015\n# Override: Require at least 0.8 bps on WETH from Optimism to Arbitrum.\nMIN_RELAYER_FEE_PCT_WETH_10_42161=0.00008\n\n# The caching duration for a subset of the queries issued to RPC\n# providers can be configured. The default time-to-live (TTL) of\n# queries is 3600 seconds (60 minutes). This is set conservatively to\n# refresh the cache often, so as to ensure that any incomplete or\n# invalid RPC provider responses are ejected within the short term.\n# Increasing cache TTL may improve the speed of the bot and lead to\n# reduced RPC provider quota utilisation, at the cost of increased\n# resource usage (i.e. RAM + disk). Increasing cache TTL may also\n# provide additional exposure to invalid or incomplete RPC responses.\nPROVIDER_CACHE_TTL=3600\n\n# Minimum number of block confirmations (MDC) for a Deposit event\n# before a relay bot will consider the Deposit finalised and\n# valid. The MDC is set based on the total deposit USD volume in a\n# relayer iteration and is specific to an origin chain. For example,\n# if the relayer wants to fill $1000 of deposits originating from mainnet,\n# then it will wait until a deposit is 32 blocks past HEAD before \n# it sends a fill. If the relayer wants to fill $100 of deposits, then it will\n# wait 16 blocks. Users can tweak these settings and take on more finality risk\n# in exchange for reacting to deposits more quickly. The following configuration\n# is equal to the default (i.e. the following config will be used if\n# MIN_DEPOSIT_CONFIRMATIONS is not set. Finality assurances may change over time. \n# See code comments here for more details about the risks with modifying\n# this configuration: https://github.com/across-protocol/relayer-v2/blob/0dde90a5909ce4ddc0dfb27e1ec8bcc1d75e2e25/src/common/Constants.ts#L25\nMIN_DEPOSIT_CONFIRMATIONS='{\"1000\": \"{ \"1\": 32, \"10\": 0, \"137\": 100, \"42161\": 0 }\", \"100\": \"{ \"1\": 16, \"10\": 0, \"137\": 80, \"42161\": 0 }\" }'\n\n# List of tokens that the relayer supports. These are addresses\n# on Ethereum.\n# For example, if only USDC's address is specified, the relayer\n# would only fill transfers of USDC going to any chains (unless\n# overridden by RELAYER_DESTINATION_CHAINS).\n# If RELAYER_TOKENS is not set or set to [], the relayer will fill\n# transfers of any token.\nRELAYER_TOKENS='[\"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\"]'\n\n# List of destination chains the relayer supports. If set to a\n# non-empty list, only transfers going to these chains will be\n# filled. In the example below, transfers destined for Ethereum\n# will be ignored.\nRELAYER_DESTINATION_CHAINS='[10,137,42161]'\n\n# If true, the relayer will request slow fills for any deposits that it\n# cannot fill due to insufficient balance. There is no direct incentive\n# to the individual relayer for do this and Across functions correctly\n# as long as at least one relayer requests slow fills. Operators are\n# recommend to use the default setting of false.\nSEND_SLOW_RELAYS=false\n\n# Relayer inventory configuration can configure two additional relayer\n# behaviours:\n# - Intelligent repayment chain selection based on current and pending\n#   balances.\n# - Automatic rebalancing from mainnet to other chains to ensure that\n#   remote chains always have a sufficient token balance.\n#\n# Inventory configuration is explained further in a subsequent section.\n#\n# Identify the inventory configuration to use. The inventory can be\n# stored as JSON in an a separate file, anywhere within the file system.\n# RELAYER_EXTERNAL_INVENTORY_CONFIG=<path-to-inventory-json-file>\n#\n# Enable inventory management to automatically rebalance tokens.\n# SEND_REBALANCES=true\n\n# Defaults to 1, must be set >= 1. If set > 1, then for any RPC\n# request, this requires that at least this count of RPCs\n# specified in the NODE_URLS_[ID] list return the exact same\n# response. We recommend setting this to 2 so that the relayer\n# does not accidentally relay a deposit whose properties two\n# different RPCs disagree about. This edge case is rare but\n# could lead to loss of funds.\nNODE_QUORUM=1"
            },
            {
                "id": "4e45d704b80b4aada64a9ae3973b88c7",
                "code": "{\n  \"wrapEtherTarget\": 0.1,\n  \"wrapEtherThreshold\": 0.125,\n  \"wrapEtherTargetPerChain\": { \"1\": 1.25 },\n  \"wrapEtherThresholdPerChain\": { \"1\": 2 },\n  \"tokenConfig\": {\n    \"WETH\": {\n      \"1\": { \"targetPct\": 100, \"thresholdPct\": 100, \"unwrapWethThreshold\": 0.25, \"unwrapWethTarget\": 1.25 },\n      \"10\": { \"targetPct\": 8, \"thresholdPct\": 5, \"unwrapWethThreshold\": 0.025, \"unwrapWethTarget\": 0.1 },\n      \"137\": { \"targetPct\": 8, \"thresholdPct\": 5 },,\n      \"42161\": { \"targetPct\": 8, \"thresholdPct\": 5, \"unwrapWethThreshold\": 0.025, \"unwrapWethTarget\": 0.1 }\n    },\n    \"DAI\": {\n      \"10\": { \"targetPct\": 8, \"thresholdPct\": 5 },\n      \"137\": { \"targetPct\": 8, \"thresholdPct\": 5 },\n      \"42161\": { \"targetPct\": 8, \"thresholdPct\": 5 }\n    },\n    \"USDC\": {\n      \"10\": { \"targetPct\": 8, \"thresholdPct\": 5 },\n      \"42161\": { \"targetPct\": 8, \"thresholdPct\": 5 }\n    },\n    \"WBTC\": {\n      \"10\": { \"targetPct\": 8, \"thresholdPct\": 5 },\n      \"137\": { \"targetPct\": 8, \"thresholdPct\": 5 },\n      \"42161\": { \"targetPct\": 8, \"thresholdPct\": 5 }\n    }\n  }\n}"
            },
            {
                "id": "cf6697ff83bd4b0ebe6a3691fd5073e7",
                "code": "# Run the relayer, deriving private key from the SECRET env var (default)\nSEND_RELAYS=false yarn relay\n\n# Run the relayer, overriding the private key source.\n# Sub in the desired key source (secret, mnemonic, privateKey, gckms).\nSEND_RELAYS=false yarn relay --wallet <secret|mnemonic|privateKey|gckms>"
            },
            {
                "id": "5864bb542d9c4b92a5256c38a0f6d89c",
                "code": "[debug]: {\n  \"at\": \"Relayer#index\",\n  \"message\": \"End of serverless execution loop - terminating process\"\n}"
            }
        ],
        "summaries": []
    },
    "https://docs.across.to/relayers/relayer-exclusivity": {
        "title": "Relayer Exclusivity | Across Docs",
        "headers": [
            "Relayer Exclusivity",
            "What is relayer exclusivity?",
            "Why is this helpful?",
            "How does relayer exclusivity work?",
            "When is relayer exclusivity being rolled out?"
        ],
        "paragraphs": [
            "Relayer exclusivity provides a single relayer with a time-limited period of exclusivity to fill a given deposit. Exclusivity is assigned at deposit time via the exclusiveRelayer and exclusivityDeadline arguments to an Across deposit, and are emitted as part of the V3FundsDeposited event. The exclusiveRelayer address has until the exclusivityDeadline timestamp on the destination chain to complete the fill with no risk of collisions. If the deposit remains unfilled on the destination chain beyond exclusivityDeadline then the fill becomes available for other relayers to complete.",
            "Speed-based relayer competition can lead to collisions and gas price competition amongst relayers. Many relayer implementations have reached a point of maturity where additional speed gains are difficult to unlock and increasingly encroach on origin chain finality guarantees.",
            "Relayer exclusivity provides a means of retaining the speed gains that Across has unlocked for users whilst reducing uncertainty and risk for relayers. Relayer exclusivity also provides a method of evaluating relayer performance and in terms of speed and availability, and enables a pathway to future order flow preferencing. Relayers are therefore incentivised to do the following:",
            "Ensure that their implementations respect the exclusiveRelayer and exclusivityDeadline fields.",
            "Ensure that they react promptly when their own relayer address is specified on a new deposit.",
            "Relayer exclusivity is assigned by any entity that originates Across deposits. The predominant source of Across deposit attributes is the Across API. Relayers can signal their intention to opt-in to the pool of exclusive relayer candidates by submitting a Pull Request to the Exclusive Relayer Configuration repository. This repository exists as an interim system in order to fast-track the rollout of relayer exclusivity.",
            "When selecting an exclusive relayer, the Across API applies a selection process that considers a number of inputs, including the relayers‚Äô own configuration preferences and their balance on the destination chain. The exact implementation and criteria for exclusive relayer selection is maintained by Risk Labs and is subject to change in order to optimise user experience and minimise externalities that leak value from the system. Recent relayer performance may also be factored in as part of the selection criteria. Third parties integrating Across Settlement are free to apply their own relayer exclusivity selection logic as they see fit.",
            "Relayer exclusivity is being rolled out incrementally in the Across Bridge dapp on select routes in order to trial the system. Performance is being monitored by the Across team and adjustments will be made as required. Third-party integrators are expected to begin incorporating relayer exclusivity in Q4 2024.",
            "Last updated 1 month ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Ensure that their implementations respect the \nexclusiveRelayer\n and \nexclusivityDeadline\n fields.\nEnsure that they react promptly when their own relayer address is specified on a new deposit.",
            "What is relayer exclusivity?\nWhy is this helpful?\nHow does relayer exclusivity work?\nWhen is relayer exclusivity being rolled out?"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/resources/release-notes": {
        "title": "Release Notes | Across Docs",
        "headers": [
            "Release Notes"
        ],
        "paragraphs": [
            "Last updated 7 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/resources/support-links": {
        "title": "Developer Support | Across Docs",
        "headers": [
            "Developer Support"
        ],
        "paragraphs": [
            "Reach out on Discord",
            "Other helpful resources:",
            "Twitter",
            "Medium",
            "Github",
            "Last updated 7 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Twitter\nMedium\nGithub"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/resources/bug-bounty": {
        "title": "Bug Bounty | Across Docs",
        "headers": [
            "Bug Bounty",
            "Bounty Program",
            "Submissions",
            "Terms & Conditions"
        ],
        "paragraphs": [
            "Security of the platform is our highest priority. All smart contracts and off-chain code (i.e. most of the code within the across-protocol repository) are within scope and are publicly verifiable. Security researchers are eligible for a bug bounty for reporting undiscovered vulnerabilities.",
            "We encourage the community to audit our open source code; we also encourage the responsible disclosure of any issues. The bug bounty program is intended to recognize the value of working with the community of independent security researchers and sets out our definition of good faith in the context of finding and reporting vulnerabilities, as well as what you can expect from us in return.",
            "Across offers substantial rewards for discoveries that can prevent the loss of assets, the freezing of assets, or harm to users.",
            "To be eligible a bounty, a bug must have not been previously known by the Across team or publicly disclosed by anyone. All Across smart contracts and interactions (including bots and front end code) are in scope.",
            "The amount of compensation will vary depending on bug severity. Reward amounts typically correspond to severity in the following manner. The reward currency can be discussed on a case by case basis.",
            "Low",
            "$250",
            "Medium",
            "$1,000",
            "High",
            "$10,000",
            "Critical",
            "up to $1,000,000",
            "Severity is calculated according to the OWASP risk rating model based on Impact and Likelihood.",
            "Please email your submissions to [email¬†protected].",
            "The submission must include clear and concise steps to reproduce the discovered vulnerability. The following layout of the bug bounty report is encouraged:",
            "Description: Describe at a high level the bug with links to problematic code",
            "Attack: Detailed instructions for exploiting the bug",
            "Mitigation: How to resolve the bug",
            "Suggested risk rating: The recommended severity of this bug",
            "The same terms and conditions from the UMA bug bounty program apply here.",
            "Last updated 2 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Description: Describe at a high level the bug with links to problematic code\nAttack: Detailed instructions for exploiting the bug\nMitigation: How to resolve the bug\nSuggested risk rating: The recommended severity of this bug",
            "Bounty Program\nSubmissions\nTerms & Conditions"
        ],
        "tables": [
            [
                [
                    "Severity",
                    "Reward"
                ],
                [
                    "Low",
                    "$250"
                ],
                [
                    "Medium",
                    "$1,000"
                ],
                [
                    "High",
                    "$10,000"
                ],
                [
                    "Critical",
                    "up to $1,000,000"
                ]
            ]
        ],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/resources/audits": {
        "title": "Audits | Across Docs",
        "headers": [
            "Audits"
        ],
        "paragraphs": [
            "Across V3 Incremental Audit",
            "Across V3 Audit",
            "Across Token and Token Distributor Audit",
            "Across V2 Audit",
            "UMA's Continuous Audit (Optimistic Oracle)",
            "UMA Audit ‚Äì L2 Bridges",
            "UMA Audit ‚Äì Phase 4",
            "UMA Audit ‚Äì Phase 6",
            "Last updated 3 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Across V3 Incremental Audit\nAcross V3 Audit\nAcross Token and Token Distributor Audit\nAcross V2 Audit\nUMA's Continuous Audit (Optimistic Oracle)\nUMA Audit ‚Äì L2 Bridges\nUMA Audit ‚Äì Phase 4\nUMA Audit ‚Äì Phase 6"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    },
    "https://docs.across.to/resources/new-chain-requests": {
        "title": "New Chain Requests | Across Docs",
        "headers": [
            "New Chain Requests",
            "Hard Requirements",
            "Additional Considerations"
        ],
        "paragraphs": [
            "The following requirements are needed for Across to consider adding support for a new chain. Across intends to support as many chains as possible to provide the best bridging, LP and relaying experience for users. However, each new chain requires significant investment, and these requirements are set to ensure that the benefit to Across Users, LPs and Relayers outweigh the development, security and operational costs of adding a new chain. ",
            "These requirements are subject to change as the EVM and Layer 2 ecosystem evolves. Meeting these requirements is the first step in evaluation and does not guarantee support.",
            "The below are non-negotiable and are a pre-requisite to any consideration.",
            "EVM chain with a canonical token and message bridge to mainnet",
            "‚â• 2 independent RPC node providers that can reliably support ~150M RPC requests per month from Across, with preference for at least one Tier 1 provider of Infura, Alchemy, Quicknode",
            "Dedicated support channel containing technical members of the new chain with priority support commitment to advise on contract development and debug data quality and/or disagreements between RPC providers",
            "Running a relayer to and from new chain",
            "Proven market opportunity, based on active users, existing bridging volume, partnership value, key market expansion and other factors",
            "Token grant for Across DAO that it will distribute to users for each transfer on Across to new chain (either chain governance token, or protocol token) to attract and incentivize users",
            "\n",
            "",
            "",
            "Last updated 5 months ago"
        ],
        "lists": [
            "üëã\nIntroduction\nGetting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users\nüîó\nUse Cases\nInstant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents\nüß†\nConcepts\nWhat are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism\nüõ†Ô∏è\nReference\nAPI Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events\nüîÅ\nRelayers\nRunning a Relayer\nRelayer Exclusivity\nüìö\nResources\nRelease Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "Getting Started\nWhat is Across?\nTechnical FAQ\nMigration Guides\nMigration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration from V2 to V3\nMigration to CCTP\nMigration Guide for Relayers\nMigration Guide for API Users",
            "Migration Guide for Relayers\nMigration Guide for API Users",
            "Instant Bridging in your Application\nBridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide\nEmbedded Cross-chain Actions\nCross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide\nSettle Cross-chain Intents",
            "Bridge Integration Guide\nMulti Chain Bridge UI Guide\nSingle Chain Bridge UI Guide",
            "Cross-chain Actions Integration Guide\nUsing the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract\nCross-chain Actions UI Guide",
            "Using the Generic Multicaller Handler Contract\nUsing a Custom Handler Contract",
            "What are Cross-chain Intents?\nIntents Architecture in Across\nIntent Lifecycle in Across\nCanonical Asset Maximalism",
            "API Reference\nSDK Reference\nContracts\nArbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet\nSelected Contract Functions\nSupported Chains\nFees in the System\nActors in the System\nSecurity Model and Verification\nDisputing Root Bundles\nValidating Root Bundles\nTracking Events",
            "Arbitrum (Chain ID: 42161)\nBase (Chain ID: 8453)\nBlast (Chain ID: 81457)\nEthereum Mainnet (Chain ID: 1)\nLinea (Chain ID: 59144)\nLisk (Chain ID: 1135)\nMode (Chain ID: 34443)\nOptimism (Chain ID: 10)\nPolygon (Chain ID: 137)\nRedstone (Chain ID: 690)\nScroll (Chain ID: 534352)\nWorld Chain (Chain ID: 480)\nzkSync (Chain ID: 324)\nZora (Chain ID: 7777777)\nSepolia Testnet",
            "Disputing Root Bundles\nValidating Root Bundles",
            "Running a Relayer\nRelayer Exclusivity",
            "Release Notes\nDeveloper Support\nBug Bounty\nAudits\nNew Chain Requests",
            "EVM chain with a canonical token and message bridge to mainnet\n‚â• 2 independent RPC node providers that can reliably support ~150M RPC requests per month from Across, with preference for at least one Tier 1 provider of Infura, Alchemy, Quicknode\nDedicated support channel containing technical members of the new chain with priority support commitment to advise on contract development and debug data quality and/or disagreements between RPC providers",
            "Running a relayer to and from new chain\nProven market opportunity, based on active users, existing bridging volume, partnership value, key market expansion and other factors\nToken grant for Across DAO that it will distribute to users for each transfer on Across to new chain (either chain governance token, or protocol token) to attract and incentivize users",
            "Hard Requirements\nAdditional Considerations"
        ],
        "tables": [],
        "code_blocks": [],
        "summaries": []
    }
}